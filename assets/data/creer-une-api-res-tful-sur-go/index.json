{"hash":"e9e710b63b02d049a9f8a5359c5c22618737fe2f","data":{"post":{"title":"Créer une API RESTful sur Go","date":"24 February 2017","content":"<p>Une API (Application Programming Interface) permet de fournir des données brutes accessibles depuis une URL. En général, cela permet de faire le pont entre une application cliente et une base de données, dans notre cas depuis SQLite. Pourquoi le choix de cette base ? Car SQLite est un système de base de données en SQL qui a pour principal atout de fonctionner sans serveur car les données sont contenues dans un fichier. Avec certes moins d'options mais cela est suffisant dans notre cas.</p>\n<p>Dans l'API que nous allons mettre en place, les données seront fournies à l'utilisateur final au format JSON (JavaScript Object Notation). Nous allons aussi réaliser des tests unitaires et configurer le serveur afin qu'il soit accessible pour les navigateurs Internet.</p>\n<p>Prérequis nécessaires :</p>\n<ul>\n<li>Go et Git installés ;</li>\n<li>Avoir des bases en Go ;</li>\n<li>Notions de requêtes CRUD en SQL et en HTTP;</li>\n</ul>\n<p>Prérequis optionnels :</p>\n<ul>\n<li>Avoir lu ce tutoriel : <a href=\"http://zestedesavoir.com/tutoriels/299/la-theorie-rest-restful-et-hateoas\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://zestedesavoir.com/tutoriels/299/la-theorie-rest-restful-et-hateoas</a> ;</li>\n<li>L'application <a href=\"https://www.getpostman.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postman</a> installée.</li>\n</ul>\n<p>Objectifs :</p>\n<ul>\n<li>Créer une API RESTful sur Go avec des requêtes en SQL via un ORM ;</li>\n<li>Réaliser des tests fonctionnels et unitaires ;</li>\n<li>Configurer CORS, OPTIONS, ajouter un token d'authentification.</li>\n</ul>\n<h2>Préparation du dossier de travail</h2>\n<p>Dans votre dossier \"gopath\" (<code class=\"language-text\">%gopath%</code> sur Windows, <code class=\"language-text\">$GOPATH</code> sur Linux et MacOS), dans le dossier \"src\" puis \"github.com\", votre nom d'utilisateur (dans ce tutoriel, ce sera \"EtienneR\") et créez un nouveau dossier (\"go_sqlite_api\" dans ce tutoriel). Le dossier de notre projet va comporter un fichier \"main.go\" contenant notre serveur et un dossier \"api\" avec les fichiers \"api.go\", \"users.go\" et le fichier de tests unitaires \"users_test.go\". Par la suite, le fichier SQLite \"data.db\" sera créé automatiquement.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">gopath/\n  src/\n    github.com/\n        EtienneR/\n            go_sqlite_api/\n                api/\n                    api.go\n                    users.go\n                    users_test.go\n                main.go\n                data.db</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Les librairies</h3>\n<p>Pour mettre en place cette API, on a besoin des 3 librairies ci-dessous.</p>\n<ul>\n<li>Gin : le micro framework basé sur HttpRouter <code class=\"language-text\">go get github.com/gin-gonic/gin</code> ;</li>\n<li>go-sqlite3 : le \"driver\" (pilote en français) SQLite3 <code class=\"language-text\">go get github.com/mattn/go-sqlite3</code> ;</li>\n<li>Gorm : l'ORM (Object-Relational Mapping) <code class=\"language-text\">go get github.com/jinzhu/gorm</code>.</li>\n</ul>\n<p>Dans le fichier \"api.go\", on appel ces librairies dans \"import\".</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> api\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"github.com/gin-gonic/gin\"</span>\n    <span class=\"token string\">\"github.com/jinzhu/gorm\"</span>\n    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/mattn/go-sqlite3\"</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Remarque : le pilote SQLite3 est indispensable pour faire fonctionner l'ORM. Gorm accepte également <strong>MySQL</strong> (et <strong>MariaDB</strong>), <strong>Postgres</strong> et <strong>FoundationDB</strong> à condition d'avoir à disposition le pilote correspondant.</p>\n<h3>Préparation de la base de données</h3>\n<p>Pour créer notre futur fichier de base de donnée SQLite \"data.db\", on va avoir recours à l'ORM, Gorm.</p>\n<h4>Structure de données</h4>\n<p>Pour la structure dans notre fichier \"users.go\", on reprend le nom de la table concernée \"users\" ainsi que les 2 champs \"id\" et \"name\".</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> api\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"github.com/gin-gonic/gin\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Users <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Id   <span class=\"token builtin\">int</span>    <span class=\"token string\">`gorm:\"AUTO_INCREMENT\" form:\"id\" json:\"id\"`</span>\n    Name <span class=\"token builtin\">string</span> <span class=\"token string\">`gorm:\"not null\" form:\"name\" json:\"name\"`</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On met en place le \"databinding\" pour les données rentrées (POST et PUT) avec <code class=\"language-text\">json:&quot;id&quot;</code> et <code class=\"language-text\">json:&quot;name&quot;</code>. Si cette notion vous parait abstraite, vous comprendrez son principe lors de l'utilisation des routes concernées. Concernant <code class=\"language-text\">form:&quot;id&quot;</code> et <code class=\"language-text\">form:&quot;name&quot;</code>, ils permettent de récupérer les données depuis \"form-data\" et \"x-www-form-urlencoded\" disponibles dans Postman. Quant à \"gorm\", ce sont des paramêtres de configuration dédiés à la création des champs concernés.`</p>\n<h4>Initialisation de la base de données</h4>\n<p>Pour se connecter à la base de données, dans le fichier \"api.go\", on indique le pilote utilisé \"sqlite3\" et le chemin du fichier \"data.db\".</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">InitDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Ouverture du fichier</span>\n    db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> gorm<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sqlite3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./data.db\"</span><span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">LogMode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Création de la table</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">HasTable</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Users<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">CreateTable</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Users<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gorm:table_options\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ENGINE=InnoDB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CreateTable</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Users<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Erreur de chargement</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> db\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans la première condition, si la table \"users\" n'existe pas, alors on l'a créé avec les options déclarées dans la structure \"Users\" ainsi que le moteur SQL \"InnoDB\".<br>\nLa fonction facultative mais utile en phase de développement <code class=\"language-text\">db.LogMode(true)</code> permet d'afficher la ou les requête(s) effectuée(s) dans le terminal.</p>\n<h3>Création du serveur</h3>\n<p>Dans le fichier \"main.go\", on déploit un serveur HTTP fonctionnant sur le port 3000 et dont les routes seront déclarées dans le package \"api\", dans le fichier \"api.go\".</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"log\"</span>\n    <span class=\"token string\">\"net/http\"</span>\n\n    <span class=\"token string\">\"github.com/EtienneR/go_sqlite_api/api\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":3000\"</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">Handlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ListenAndServe: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Remarque : en production, il faudra remplacer le port 3000 par 80.</p>\n<p>Vous l'avez compris, à ce stade, le serveur ne fonctionne pas car on n'a pas encore travaillé dans le fichier \"api.go\". On ne touchera plus au fichier \"main.go\".</p>\n<h2>Le routage</h2>\n<p>Dans cette partie, on va faire le plus gros, c'est-à-dire déclarer nos routes avec les requêtes SQL correspondantes en prenant soin de prendre en compte les erreurs éventuelles qui surviennent lors de l'appelation et l'envoi des données. Nous testerons nos routes avec Postman sauf si vous préférez CURL et sa syntaxe...</p>\n<h3>Objectifs</h3>\n<p>On va utiliser 5 routes basiques de CRUD (Create, Read, Update, Delete) listées ci-dessous.</p>\n<table>\n<thead>\n<tr>\n<th>Verbe</th>\n<th>URL</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>/api/v1/users</td>\n<td>Lister tous les utilisateurs</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/api/v1/users/1</td>\n<td>Lister l'utilisateur #1</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/api/v1/users</td>\n<td>Poster un nouvel utilisateur</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>/api/v1/users/1</td>\n<td>Modifier l'utilisateur #1</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/api/v1/users/1</td>\n<td>l'utilisateur #1</td>\n</tr>\n</tbody>\n</table>\n<h3>Préparation</h3>\n<p>A la suite (dans le fichier \"api.go\"), dans une nouvelle fonction nommée <code class=\"language-text\">Handlers()</code>, on fait appel au micro-framework Gin pour déclarer nos routes.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Handlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Engine <span class=\"token punctuation\">{</span>\n    r <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    v1Users <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api/v1/users\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        v1Users<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> PostUser<span class=\"token punctuation\">)</span>\n        v1Users<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> GetUsers<span class=\"token punctuation\">)</span>\n        v1Users<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":id\"</span><span class=\"token punctuation\">,</span> GetUser<span class=\"token punctuation\">)</span>\n        v1Users<span class=\"token punctuation\">.</span><span class=\"token function\">PUT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":id\"</span><span class=\"token punctuation\">,</span> EditUser<span class=\"token punctuation\">)</span>\n        v1Users<span class=\"token punctuation\">.</span><span class=\"token function\">DELETE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":id\"</span><span class=\"token punctuation\">,</span> DeleteUser<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans un premier temps, on instancie le serveur MUX dans une variable (r). Sachant que les URL de notre API commencent par le même chemin, le \"endpoint\" <code class=\"language-text\">api/v1/users</code>, on déclare un groupe pour nos routes dans une variable (<code class=\"language-text\">v1Users</code>). C'est dans cette fonction que l'on placera nos routes. Et on retourne les données de notre routeur MUX car on en a besoin dans notre fichier \"main.go\". Pour mieux organiser notre code, nous allons créer les fonctions de nos routes dans le fichier \"users.go\".</p>\n<h3>Ajouter un nouvel utilisateur</h3>\n<p>Pour insérer des données, on veut effectuer la requête SQL semblable à celle ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token string\">\"users\"</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"toto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>On met en place une route de type POST dans la fonction <code class=\"language-text\">PostUser</code>.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token comment\">// Ajouter un utilisteur</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">PostUser</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    db <span class=\"token operator\">:=</span> <span class=\"token function\">InitDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> json Users\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>json<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Si le champ est bien saisi</span>\n    <span class=\"token keyword\">if</span> json<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// INSERT INTO \"users\" (name) VALUES (json.Name);</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>json<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Affichage des données saisies</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Affichage de l'erreur</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">422</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Fields are empty\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans un premier temps, on récupère les données rentrées en JSON via la fonction <code class=\"language-text\">c.Bind()</code>. Puis on vérifie si le champ \"name\" n'est pas vide alors on envoie un message de succès avec le code HTTP \"201\". Sinon on renvoie le code \"422\" avec un message d'erreur.</p>\n<p>Dans Postman, sélectionnez \"POST\" puis l'URL \"<a href=\"http://localhost:3000/api/v1/users\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3000/api/v1/users</a>\", cochez \"Body\" puis \"raw\", sélectionnez \"JSON (application/json)\" et copiez les données à rentrer <code class=\"language-text\">{ &quot;name&quot;: &quot;John Doe&quot; }</code> et cliquez sur \"Send\".</p>\n<p>Attention : pour que \"form-data\" et \"x-www-form-urlencoded\" fonctionnent correctement, il ne faut pas qu'il y'ait d'en-têtes HTTP dans \"Headers\".</p>\n<h3>Lister tous les utilisateurs</h3>\n<p>On veut afficher dans un tableau JSON tous les utilisateurs présents dans la table \"users\" ce qui revient à faire en SQL.</p>\n<div class=\"gridsome-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>On met en place une route de type GET dans la fonction <code class=\"language-text\">GetUsers</code>.`</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token comment\">// Obtenir la liste de tous les utilisateurs</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetUsers</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    db <span class=\"token operator\">:=</span> <span class=\"token function\">InitDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> users <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Users\n    <span class=\"token comment\">// SELECT * FROM users</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>users<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Affichage des données</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On créé une variable <code class=\"language-text\">users</code> héritée de la structure du même nom en précisant que l'on souhaite un tableau (crochets ouvrant et fermant). Puis on effectue la requête SQL et on appel le résultat dans un appel au format JSON via la fonction <code class=\"language-text\">c.JSON()</code>.</p>\n<h3>Lister un utilisateur</h3>\n<p>On veut afficher les données d'un utilisateur ce qui revient à faire en SQL.</p>\n<div class=\"gridsome-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>On met en place une route de type GET avec l'id en paramètre dans la fonction <code class=\"language-text\">GetUser</code>.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token comment\">// Obtenir un utilisateur par son id</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetUser</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    db <span class=\"token operator\">:=</span> <span class=\"token function\">InitDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    id <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">.</span><span class=\"token function\">ByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> user Users\n    <span class=\"token comment\">// SELECT * FROM users WHERE id = 1;</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> user<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Affichage des données</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Affichage de l'erreur</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User not found\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans un premier temps, on stocke l'id concerné dans la variable <code class=\"language-text\">id</code> via la fonction <code class=\"language-text\">c.Params.ByName(&quot;id&quot;)</code>. Puis on vérifie que la requête SQL renvoie un résultat dans une ligne sinon on affiche une erreur 404 avec un message d'erreur personnalisé.`</p>\n<h3>Modifier un utilisateur</h3>\n<p>Pour modifier des données, on veut effectuer la requête SQL.</p>\n<div class=\"gridsome-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> users <span class=\"token keyword\">SET</span> name<span class=\"token operator\">=</span><span class=\"token string\">'toto2'</span> <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>On met en place une route de type PUT avec l'id en paramètre dans la fonction <code class=\"language-text\">EditUser</code>.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token comment\">// Modifier un utilisateur</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">EditUser</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    db <span class=\"token operator\">:=</span> <span class=\"token function\">InitDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    id <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">.</span><span class=\"token function\">ByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> user Users\n    <span class=\"token comment\">// SELECT * FROM users WHERE id = 1;</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> user<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> user<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> json Users\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>json<span class=\"token punctuation\">)</span>\n\n            result <span class=\"token operator\">:=</span> Users<span class=\"token punctuation\">{</span>\n                Id<span class=\"token punctuation\">:</span>   user<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span>\n                Name<span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// UPDATE users SET name='json.Name' WHERE id = user.Id;</span>\n            db<span class=\"token punctuation\">.</span><span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Affichage des données modifiées</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Affichage de l'erreur</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User not found\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Affichage de l'erreur</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">422</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Fields are empty\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans un premier temps, on stocke l'id concerné dans la variable <code class=\"language-text\">id</code> via la fonction <code class=\"language-text\">c.Params.ByName(&quot;id&quot;)</code>. Comme dans la fonction précédente, on vérifie si le champ \"name\" n'est pas vide alors on envoie les données avec un message de succès de code HTTP \"201\". Sinon on renvoie une erreur \"422\" avec un message d'erreur. Puis on vérifie que la requête SQL renvoie un résultat, sinon on affiche une erreur 404 avec un message d'erreur personnalisé. Et pour finir, on insère les données via <code class=\"language-text\">db.Model().Update()</code>.</p>\n<p>Dans Postman, sélectionnez \"PUT\" puis l'URL \"<a href=\"http://localhost:3000/api/v1/users/1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3000/api/v1/users/1</a>\", cochez \"Body\" puis \"raw\" et copiez les données à rentrer <code class=\"language-text\">{ &quot;name&quot;: &quot;John la Frite&quot; }</code> et cliquez sur \"Send\".</p>\n<h3>Supprimer un utilisateur</h3>\n<p>Pour supprimer un utilisateur, on veut effectuer la requête SQL ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>On met en place une route de type DELETE avec l'id en paramètre dans la fonction <code class=\"language-text\">DeleteUser</code>.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token comment\">// Supprimer un utilisateur</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">DeleteUser</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    db <span class=\"token operator\">:=</span> <span class=\"token function\">InitDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Récupération de l'id dans une variable</span>\n    id <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">.</span><span class=\"token function\">ByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> user Users\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> user<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// DELETE FROM users WHERE id = user.Id</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Affichage des données</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User #\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\" deleted\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Affichage de l'erreur</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"User not found\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans un premier temps, on stocke l'id concerné dans la variable <code class=\"language-text\">id</code> via la fonction <code class=\"language-text\">c.Params.ByName(&quot;id&quot;)</code>. Puis, comme pour la route précédente, on vérifie que l'utilisateur existe sinon on affiche une erreur 404 avec un message d'erreur personnalisé. Si l'utilisateur existe alors on le supprime avec <code class=\"language-text\">db.Delete()</code> et on affiche un message de succès.</p>\n<p>Dans Postman, sélectionnez \"DELETE\" puis l'URL \"<a href=\"http://localhost:3000/api/v1/users/1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3000/api/v1/users/1</a>\" et cliquez sur \"Send\".</p>\n<h2>Tests unitaires</h2>\n<p><img src=\"https://i.giphy.com/56LhCE2j6Uy2Y.gif\"></p>\n<p>Jusqu'ici, on a exécuté des tests fonctionnels avec Postman. Finalement, il est possible de s'en passer en effectuant une batterie de tests. Concretement, dans un fichier on va effectuer les mêmes taches que l'on a exécuté sur Postman mais de manière automatisées. Pour ce faire, on va donc travailler dans le fichier dédié, \"users_test.go\".</p>\n<h3>Librairies et variables globales</h3>\n<p>On importe un certain nombre de librairies dont l'indispensable \"testing\" pour n'importe quel test sur Go ainsi que \"net/http\" et \"net/http/httptest\" pour des applications orientées Web. On déclare aussi des variables globales qui vont nous servir dans nos différentes fonctions.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> api_test\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"io\"</span>\n    <span class=\"token string\">\"net/http\"</span>\n    <span class=\"token string\">\"net/http/httptest\"</span>\n    <span class=\"token string\">\"strings\"</span>\n    <span class=\"token string\">\"testing\"</span>\n\n     <span class=\"token string\">\"github.com/EtienneR/go_sqlite_api/api\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n    server               <span class=\"token operator\">*</span>httptest<span class=\"token punctuation\">.</span>Server\n    reader               io<span class=\"token punctuation\">.</span>Reader\n    usersUrl<span class=\"token punctuation\">,</span> usersUrlId <span class=\"token builtin\">string</span>\n    userId               <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Initialisation</h3>\n<p>Lorsqu'on lance une batterie de tests, on se base sur une base de données vide afin d'éviter les problèmes avec l'auto-increment des id. Pour cela on supprime la table et on l'a créé avec des utilisateurs. Dans notre cas, ce sera un fichier \"data.db\" dans le dossier \"api\". Ensuite, on démarre un serveur HTTP de test basé sur nos routes. Dans 2 variables, on stocke les URL (la première sans le paramêtre \"id\" et la seconde avec).</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Ouverture de la connexion vers la BDD SQLite</span>\n    db <span class=\"token operator\">:=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">InitDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Fermeture de la connexion vers la BDD SQLite</span>\n    <span class=\"token keyword\">defer</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> user api<span class=\"token punctuation\">.</span>Users\n\n    <span class=\"token comment\">// Suppression de la table</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">DropTable</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Création de la table</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">CreateTable</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Création d'utilisateurs</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>api<span class=\"token punctuation\">.</span>Users<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Pierre\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>api<span class=\"token punctuation\">.</span>Users<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Paul\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>api<span class=\"token punctuation\">.</span>Users<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jacques\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>api<span class=\"token punctuation\">.</span>Users<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Marie Thérèse\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Démarrage du serveur HTTP</span>\n    server <span class=\"token operator\">=</span> httptest<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">Handlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// URL sans paramêtre et avec</span>\n    usersUrl <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>URL <span class=\"token operator\">+</span> <span class=\"token string\">\"/api/v1/users\"</span>\n    usersUrlId <span class=\"token operator\">=</span> usersUrl <span class=\"token operator\">+</span> <span class=\"token string\">\"/5\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Fonctions de test</h3>\n<p>Comme dans notre test fonctionnel, on va tester chacune des routes de notre API.</p>\n<h4>Tester l'ajout d'une ligne</h4>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestPostUser</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Contenu à soumettre</span>\n    userJson <span class=\"token operator\">:=</span> <span class=\"token string\">`{\"name\": \"Donovan\"}`</span>\n\n    <span class=\"token comment\">// Contenu à soumettre au bon format</span>\n    reader <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>userJson<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Déclaration de la requête : type, URL, contenu</span>\n    request<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> usersUrl<span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Requête de type JSON</span>\n    request<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Exécution de la requête</span>\n    response<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>DefaultClient<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Erreur si route inacessible</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Erreur si code HTTP différent de 201</span>\n    <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">!=</span> <span class=\"token number\">201</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success expected: %d\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>On stocke dans une variable le contenu de la ligne que l'on souhaite ajouter ;</li>\n<li>On modifie ce contenu pour le rendre lisible au format \"NewReader\" ;</li>\n<li>\n<p>On déclare la requête avec 3 paramètres :</p>\n<ul>\n<li>le type de la route : \"POST\" ;</li>\n<li>l'URL de la route ;</li>\n<li>le contenu ;</li>\n</ul>\n</li>\n<li>On spécifie ce contenu au format JSON (afin d'éviter une erreur HTTP 422) ;</li>\n<li>S'il y a une erreur pour contacter la route, alors le test affichera une erreur ;</li>\n<li>Si le code HTTP n'est pas 201 alors le test affichera une erreur.</li>\n</ol>\n<h4>Tester la lecture des lignes</h4>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestGetUsers</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Contenu à soumettre vide</span>\n    reader <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Déclaration de la reqûête : type, URL, contenu</span>\n    request<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> usersUrl<span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Exécution de la requête</span>\n    response<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>DefaultClient<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Erreur si route inacessible</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Erreur si code HTTP différent de 200</span>\n    <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">!=</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success expected: %d\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>On stocke dans une variable aucun contenu;</li>\n<li>\n<p>On déclare la requête avec 3 paramètres :</p>\n<ul>\n<li>le type de la route : \"GET\" ;</li>\n<li>l'URL de la route ;</li>\n<li>le contenu (aucun) ;</li>\n</ul>\n</li>\n<li>S'il y a une erreur pour contacter la route, alors le test affichera une erreur ;</li>\n<li>Si le code HTTP n'est pas 200 alors le test affichera une erreur.</li>\n</ol>\n<h4>Tester la lecture d'une ligne</h4>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestGetUser</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Contenu à soumettre vide</span>\n    reader <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Déclaration de la requête : type, URL, contenu</span>\n    request<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> usersUrlId<span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Exécution de la requête</span>\n    response<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>DefaultClient<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Erreur si route inacessible</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Erreur si code HTTP différent de 200</span>\n    <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">!=</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success expected: %d\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>On stocke dans une variable aucun contenu;</li>\n<li>\n<p>On déclare la requête avec 3 paramètres :</p>\n<ul>\n<li>le type de la route : \"GET\" ;</li>\n<li>l'URL de la route avec l'id en paramètre ;</li>\n<li>le contenu (aucun) ;</li>\n</ul>\n</li>\n<li>S'il y a une erreur pour contacter la route, alors le test affichera une erreur ;</li>\n<li>Si le code HTTP n'est pas 200 alors le test affichera une erreur.</li>\n</ol>\n<h4>Tester la modification d'une ligne</h4>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestEditUser</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Contenu à soumettre</span>\n    userJson <span class=\"token operator\">:=</span> <span class=\"token string\">`{\"name\": \"Mark\"}`</span>\n\n    <span class=\"token comment\">// Contenu à soumettre au bon format</span>\n    reader <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>userJson<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Déclaration de la requête : type, URL, contenu</span>\n    request<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span> usersUrlId<span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Requête de type JSON</span>\n    request<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Exécution de la requête</span>\n    response<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>DefaultClient<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Erreur si route inacessible</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Erreur si code HTTP différent de 200</span>\n    <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">!=</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success expected: %d\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>On stocke dans une variable le contenu de la ligne que l'on souhaite ajouter ;</li>\n<li>On modifie ce contenu pour le rendre lisible au format \"NewReader\" ;</li>\n<li>\n<p>On déclare la requête avec 3 paramètres :</p>\n<ul>\n<li>le type de la route : \"PUT\" ;</li>\n<li>l'URL de la route avec l'id en paramètre ;</li>\n<li>le contenu ;</li>\n</ul>\n</li>\n<li>On spécifie ce contenu au format JSON (afin d'éviter une erreur HTTP 422) ;</li>\n<li>S'il y a une erreur pour contacter la route, alors le test affichera une erreur ;</li>\n<li>Si le code HTTP n'est pas 200 alors le test affichera une erreur.</li>\n</ol>\n<h4>Tester la suppression d'une ligne</h4>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestDeleteUser</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Contenu à soumettre vide</span>\n    reader <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Déclaration de la requête : type, URL, contenu</span>\n    request<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">,</span> usersUrlId<span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Exécution de la requête</span>\n    response<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>DefaultClient<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Erreur si route inacessible</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Erreur si code HTTP différent de 200</span>\n    <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">!=</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success expected: %d\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>On stocke dans une variable aucun contenu;</li>\n<li>\n<p>On déclare la requête avec 3 paramètres :</p>\n<ul>\n<li>le type de la route : \"DELETE\" ;</li>\n<li>l'URL de la route avec l'id en paramètre ;</li>\n<li>le contenu (aucun) ;</li>\n</ul>\n</li>\n<li>S'il y a une erreur pour contacter la route, alors le test affichera une erreur ;</li>\n<li>Si le code HTTP n'est pas 200 alors le test affichera une erreur.</li>\n</ol>\n<h3>Lancer la série des tests</h3>\n<p>Dans votre terminal, allez dans le dossier \"api\" et lancez le test avec la commande <code class=\"language-text\">go test api_test.go</code>. Si tout est ok, vous devriez avoir un message de ce genre : <code class=\"language-text\">ok command-line-arguments 0.210s</code>.`</p>\n<p><img src=\"https://i.giphy.com/ZKf5OzdXdjtRu.gif\"></p>\n<p>Pour voir tout le processus des tests : <code class=\"language-text\">go test -bench=.</code>.</p>\n<p>Dans le dossier \"api\" vous avez remarqué qu'un nouveau fichier a fait son apparition, il s'agit du fichier \"data.db\" dédié aux tests.</p>\n<p>Remarque : si vous utilisez le protocole de versionning Git, n'oubliez pas d'ajouter le chemin du fichier de base de données de test dans le fichier \".gitignore\".</p>\n<h2>Options de configurations</h2>\n<p>Dans cette partie, nous allons utiliser la notion de \"middleware\". C'est une fonction qui permet d'être appelée depuis une ou plusieurs fonctions.</p>\n<h3>CORS (Cross Origin Ressource Sharing)</h3>\n<p>Pour établir une communication interdomaine, il faut autoriser la connexion en activant le CORS sinon vous aurez un message explicite dans Firefox.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">Blocage d’une requête multi-origines <span class=\"token punctuation\">(</span>Cross-Origin Request<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> la politique « Same Origin » ne permet pas de consulter la ressource distante située sur http://localhost:3000/api/v1/users. Raison <span class=\"token builtin class-name\">:</span> l’en-tête CORS « Access-Control-Allow-Origin » est manquant.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Message d'erreur testé avec le code Javascript ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3000/api/v1/users'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'200'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Au niveau local, dans la ou les route(s) concernée(s).</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\">c<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>L'astérisque signifie que l'accès est autorisé pour n'importe quelle IP. Pour des raisons de sécurité, vous pouvez spécifier une adresse IP ou plusieurs, séparées par une virgule.</p>\n<p>Au niveau global, à partir d'un middleware, on créé une fonction nommée <code class=\"language-text\">Cors()</code>.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> gin<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Puis on appel notre fonction <code class=\"language-text\">Cors()</code> dans la fonction <code class=\"language-text\">Handlers()</code> du fichier \"api.go\".</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token comment\">// Activation du CORS</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span><span class=\"token function\">Cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Coté test unitaire, ça donne la vérification du header \"Access-Control-Allow-Origin\".</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"*\"</span> <span class=\"token punctuation\">{</span>\n    t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No CORS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>Activer OPTIONS</h3>\n<p>Par défaut, lorsque vous allez essayer de faire un requête vers une route de type POST, PUT ou DELETE, un exemple de message ci-dessous apparaitra sur Firefox.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">Blocage d’une requête multi-origines <span class=\"token punctuation\">(</span>Cross-Origin Request<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> la politique « Same Origin » ne permet pas de consulter la ressource distante située sur http://localhost:3000/api/v1/users. <span class=\"token punctuation\">(</span>Raison <span class=\"token builtin class-name\">:</span> échec <span class=\"token function\">du</span> canal de pré-vérification des requêtes CORS.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Message d'erreur testé avec le code Javascript ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3000/api/v1/users'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json;charset=UTF-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"https://i.giphy.com/cAEm5rSuuBEGY.gif\"></p>\n<p>Alors oui ce message est ambigüe car on a activé le CORS pour toutes les routes. En fait, Firefox ou votre navigateur favori ne trouve pas la route de type \"OPTIONS\". En regardant de plus près dans le terminal de Gin, cette route est effectivement déclarée comme 404.<br>\nPour remédier à ce problème, on ajoute 2 routes de type \"OPTIONS\", la première pour POST et la seconde pour PUT et DELETE.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\">v1Users<span class=\"token punctuation\">.</span><span class=\"token function\">OPTIONS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> OptionsUser<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// POST</span>\nv1Users<span class=\"token punctuation\">.</span><span class=\"token function\">OPTIONS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":id\"</span><span class=\"token punctuation\">,</span> OptionsUser<span class=\"token punctuation\">)</span> <span class=\"token comment\">// PUT, DELETE</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Ces dernières pointent toutes les deux sur la même fonction, \"OptionsUser\".</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">OptionsUser</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Methods\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE, POST, PUT\"</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Headers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Coté tests unitaires, ça donne la vérification du header \"Access-Control-Allow-Methods\" ainsi que \"Access-Control-Allow-Headers\"</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Methods\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"DELETE, POST, PUT\"</span> <span class=\"token punctuation\">{</span>\n    t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Methods is wrong :(\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Headers\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"Content-Type\"</span> <span class=\"token punctuation\">{</span>\n    t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Headers is wrong :(\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Authentification avec un token</h3>\n<p>Le but du token c'est de donner un identifiant généré aléatoirement depuis un formulaire d'inscription. Le serveur vérifie ensuite si le token existe bien dans la base de données.<br>\nOn met en place un middleware nommé <code class=\"language-text\">TokenAuthMiddleware()</code>.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TokenAuthMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> gin<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Récupération du paramètre \"token\" dans une variable</span>\n        token <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">FormValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// Token vide</span>\n        <span class=\"token keyword\">if</span> token <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Access denied, API token required\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Vérification de la valeur du token</span>\n        <span class=\"token keyword\">if</span> token <span class=\"token operator\">!=</span> <span class=\"token string\">\"mon_super_token\"</span> <span class=\"token punctuation\">{</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Invalid API token\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On récupère le champ token nommé \"token\" via la fonction <code class=\"language-text\">c.Request.FormValue()</code>. S'il est vide ou si le token n'est pas bon, on renvoit une erreur 403 ou une 401 en personnalisant le message d'erreur.</p>\n<p>On peut utiliser le middleware en local.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\">v1Users<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TokenAuthMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> GetUsers<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Ou en global dans la déclaration du groupe de routes.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\">v1Users <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api/v1/users\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TokenAuthMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Pour communiquer avec l'API, on met le token en paramètre dans l'URL concernée <a href=\"http://localhost:3000/api/v1/users?token=mon_super_token\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3000/api/v1/users?token=mon_super_token</a>. Bien entendu, il existe d'autre solutions comme HTTP authentification (Basic ou Digest), Oauth, Auth, OpenID et d'autres selon vos besoins.</p>\n<h2>Conclusion</h2>\n<p>Rapide à mettre en place une fois la structure définie en amont, les routes sont gérées en aval avec le micro framework accompagnées des requêtes SQL adéquates. Vous pouvez désormais vous concentrer sur vos applications SPA (Single Page Application) et mobiles (Android, IOS, Windows Phone, etc...). Pour aller plus loin, vous pouvez activer HTTPS ce qui activera HTTP 2 pour vous routes (seulement à partir de Go 1.6).</p>\n<h2>Sources</h2>\n<ul>\n<li>Espace de travail : <a href=\"https://golang.org/doc/code.html#Workspaces\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://golang.org/doc/code.html#Workspaces</a></li>\n<li>Gin : <a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/gin-gonic/gin</a></li>\n<li>Pilote SQLite : <a href=\"https://github.com/mattn/go-sqlite3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/mattn/go-sqlite3</a></li>\n<li>Gorm : <a href=\"http://jinzhu.me/gorm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://jinzhu.me/gorm</a></li>\n<li>S'en sortir avec SQL sur Go : <a href=\"http://go-database-sql.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://go-database-sql.org</a></li>\n</ul>\n","download":"https://github.com/EtienneR/go_sqlite_api","tags":[{"title":"Golang","path":"/tag/Golang/"},{"title":"API","path":"/tag/API/"}],"timeToRead":19,"parts":[]}},"context":{}}