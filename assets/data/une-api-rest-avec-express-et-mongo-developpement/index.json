{"hash":"321f72ea5ea99330a789cb374431474c20a110a9","data":{"post":{"title":"Une API REST avec Express et Mongo : Développement","date":"2 May 2020","content":"<h2>Modèle</h2>\n<p>Toutes les requêtes Mongo sont centralisées dans des modèles. Ces fichiers permettent de communiquer avec la base de données.</p>\n<h3>Connexion à Mongo</h3>\n<p>Dans le répertoire <strong>api</strong>, créez un nouveau dossier <strong>config</strong> avec un fichier à l’intérieur <strong>db.config.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Appel des modules</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Chargement des variables d'environnement</span>\n<span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGO_HOST</span> <span class=\"token operator\">||</span> <span class=\"token string\">'0.0.0.0'</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGO_PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">27017</span>\n<span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGO_INITDB_ROOT_USERNAME</span>\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGO_INITDB_ROOT_PASSWORD</span>\n<span class=\"token keyword\">const</span> database <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGO_INITDB_DATABASE</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">connect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mongodb://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>password<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">@</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>database<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?authSource=admin</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      useNewUrlParser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      useFindAndModify<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      useCreateIndex<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      useUnifiedTopology<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> err\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  connect\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans ce fichier, on met en place une seule fonction exportable pour se connecter à Mongo.</p>\n<p>Cette connexion s'effectue dans le fichier <strong>index.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config/db.config'</span><span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>### Schématisons</p>\n<p>Nous allons utiliser la fonction <strong>Schema</strong> de Mongoose avec 5 champs listés dans le tableau ci-dessous.</p>\n<table>\n<thead>\n<tr>\n<th>Nom</th>\n<th>Type</th>\n<th>Autres*</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>email</td>\n<td>string</td>\n<td><strong><a href=\"https://mongoosejs.com/docs/api.html#schematype_SchemaType-required\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">required</a></strong>, <strong><a href=\"https://mongoosejs.com/docs/api.html#schematype_SchemaType-unique\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">unique</a></strong></td>\n</tr>\n<tr>\n<td>nom</td>\n<td>string</td>\n<td><strong><a href=\"https://mongoosejs.com/docs/api.html#schematype_SchemaType-required\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">required</a></strong></td>\n</tr>\n<tr>\n<td>prenom</td>\n<td>string</td>\n<td><strong><a href=\"https://mongoosejs.com/docs/api.html#schematype_SchemaType-required\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">required</a></strong></td>\n</tr>\n<tr>\n<td>createdAt</td>\n<td>date</td>\n<td><a href=\"https://mongoosejs.com/docs/guide.html#timestamps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mongoosejs.com/docs/guide.html#timestamps</a></td>\n</tr>\n<tr>\n<td>updatedAt</td>\n<td>date</td>\n<td><a href=\"https://mongoosejs.com/docs/guide.html#timestamps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mongoosejs.com/docs/guide.html#timestamps</a></td>\n</tr>\n</tbody>\n</table>\n<p>*Il existe d’autres options... <a href=\"https://mongoosejs.com/docs/validation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mongoosejs.com/docs/validation.html</a></p>\n<p>ℹ️ Le champs email étant <strong>unique</strong>, il est considéré comme un <strong>index</strong>.</p>\n<p>Créez un nouveau fichier dans <strong>models/users.model.js</strong>. Dans ce modèle, on définit le schéma de Mongoose.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Appel des modules</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> userSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n      required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    nom<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n      required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    prenom<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n      required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    timestamps<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> userSchema<span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  User\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Ce schéma est exporté afin d'être utilisé dans un futur proche dans le fichier du contrôleur.</p>\n<h2>Contrôleur</h2>\n<p>Créez un nouveau dossier <strong>controllers</strong> avec un fichier intitulé <strong>users.ctrl.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Chargement des dépendances</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/users.model.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>User</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>### Liste des requêtes</p>\n<p>Avant de poursuivre, faisons le point sur nos futures requêtes de type <strong>CRUD</strong> (<strong>C</strong>reate <strong>R</strong>ead <strong>U</strong>pdate <strong>D</strong>elete).</p>\n<table>\n<thead>\n<tr>\n<th>Méthode</th>\n<th>Description</th>\n<th>Endpoint</th>\n<th>Fonction Mongoose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>POST</td>\n<td>Ajouter une ligne</td>\n<td>/api/v1/users</td>\n<td><strong><a href=\"https://mongoosejs.com/docs/api.html#document_Document-save\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">save</a></strong></td>\n</tr>\n<tr>\n<td>GET</td>\n<td>Afficher toutes les lignes</td>\n<td>/api/v1/users</td>\n<td><strong><a href=\"https://mongoosejs.com/docs/api.html#model_Model.find\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">find</a></strong></td>\n</tr>\n<tr>\n<td>GET</td>\n<td>Afficher une seule ligne via l'id</td>\n<td>/api/v1/users/:id</td>\n<td><strong><a href=\"https://mongoosejs.com/docs/api.html#model_Model.findById\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">findById</a></strong></td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>Modifier un ou plusieurs champs</td>\n<td>/api/v1/users/:id</td>\n<td><strong><a href=\"https://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">findByIdAndUpdate</a></strong></td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>Supprimer une ligne</td>\n<td>/api/v1/users/:id</td>\n<td><strong><a href=\"https://mongoosejs.com/docs/api.html#model_Model.findByIdAndRemove\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">findByIdAndRemove</a></strong></td>\n</tr>\n</tbody>\n</table>\n<p>Les 5 requêtes classiques d'une API REST.</p>\n<h3>Récapitulatif</h3>\n<p>Avant de créer notre contrôleur, il faut garder à l'esprit les erreurs possibles dans chaque route.</p>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Ok</th>\n<th>Erreurs possibles</th>\n<th>Modèle</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>POST</td>\n<td>201</td>\n<td>400 - 409 - 422</td>\n<td><strong>saveOne</strong></td>\n</tr>\n<tr>\n<td>GET</td>\n<td>200</td>\n<td>202</td>\n<td><strong>findAll</strong></td>\n</tr>\n<tr>\n<td>GET (one)</td>\n<td>200</td>\n<td>400 - 404</td>\n<td><strong>findById</strong></td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>200</td>\n<td>400 - 404 - 409 - 422</td>\n<td><strong>updateById</strong></td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>200</td>\n<td>400 - 404</td>\n<td><strong>deleteById</strong></td>\n</tr>\n</tbody>\n</table>\n<p>Les erreurs 400 seront déclarées dans les middlewares, cela nous réduit un peu la charge. :p</p>\n<p>Quant aux erreurs 409 et 422, elles concernent respectivement l'unicité de l'email de l'utilisateur et la non présence d'un ou plusieurs champs (de type <strong>required</strong> dans le modèle).</p>\n<h3>Save (ajouter une ligne)</h3>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Ajouter un utilisateur */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">saveOne</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Stockage des données dans le constructeur</span>\n  <span class=\"token keyword\">const</span> newUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Requête Mongoose - https://mongoosejs.com/docs/api.html#document_Document-save</span>\n  <span class=\"token keyword\">return</span> newUser\n    <span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res\n        <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>_id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> created</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">11000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">409</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'this address email already existing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        err<span class=\"token punctuation\">.</span>errors <span class=\"token operator\">&amp;&amp;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n        err<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">422</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans la fonction <strong>saveOne</strong>, on stocke les données dans un nouveau constructeur. Puis, on insère les données dans Mongo via la fonction <strong>save</strong>. Si tout va bien, le résultat est retourné dans le <strong>then</strong> avec un code HTTP 201 sinon l'erreur est gérée dans le <strong>catch</strong>.</p>\n<p>Concernant les erreurs, il en existe plusieurs dans notre cas.</p>\n<ul>\n<li>409 : si l'email est déjà utilisé ;</li>\n<li>422 : si l'un des champs est mal renseigné ;</li>\n<li>500 : par défaut.</li>\n</ul>\n<h3>findAll (trouver toutes les lignes)</h3>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Tous les utilisateurs */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Requête Mongoose - https://mongoosejs.com/docs/api.html#model_Model.find</span>\n  <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">202</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'no users available'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans la fonction <strong>findAll</strong>, on récupère les données présentent dans la collection Mongo via la fonction de Mongoose <code class=\"language-text\">find</code>. Puis dans le <strong>then</strong> on vérifie la longueur du tableau de données. En effet, si ce dernier a une longueur supérieur à 0, alors on renvoi un code HTTP 200. Sinon on renvoi un code HTTP 202 spécifiant qu'il n'y a pas de données.</p>\n<p>### findById (trouver une seule ligne)</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Tous les utilisateurs */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Requête Mongoose - https://mongoosejs.com/docs/api.html#model_Model.find</span>\n  <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">202</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'no users available'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans la fonction <strong>findAll</strong>, on récupère les données présentent dans la collection Mongo via la fonction de Mongoose <code class=\"language-text\">find</code>. Puis dans le <strong>then</strong> on vérifie la longueur du tableau de données. En effet, si ce dernier a une longueur supérieur à 0, alors on renvoi un code HTTP 200. Sinon on renvoi un code HTTP 202 spécifiant qu'il n'y a pas de données.</p>\n<p>### findByIdAndUpdate (modifier une ligne via son id)</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Modifier utilisateur via son id */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Récupération de l'id</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n\n  <span class=\"token comment\">// Requête Mongoose - https://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate</span>\n  <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndUpdate</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    runValidators<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Présence d'un objet de données</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> updated</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Ligne non existante</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> not found</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">11000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">409</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'this address email already existing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        err<span class=\"token punctuation\">.</span>errors <span class=\"token operator\">&amp;&amp;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n        err<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">422</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans la fonction <strong>updateById</strong>, on récupère l’id de l’utilisateur concerné. Puis on fourni en paramètre de la fonction Mongoose <code class=\"language-text\">findByIdAndUpdate</code>, l'id, les données saisies et en troisième les options <code class=\"language-text\">new</code>et <code class=\"language-text\">runValidators</code>. Le premier permet de retourner l'objet modifié et le second, comme son nom l'indique de prendre en compte les règles de validation du schéma. Ensuite dans le <strong>then</strong> on vérifie la présence du résultat. En effet, si ce dernier est présent, alors on renvoi un code HTTP 200 spécifiant que l'utilisateur a bien été modifié. Sinon on renvoi un code HTTP 404 spécifiant que cette utilisateur n’existe pas ou n’existe plus.</p>\n<p>Concernant les erreurs, il en existe plusieurs dans notre cas.</p>\n<ul>\n<li>409 : si l’email est déjà utilisé ;</li>\n<li>422 : si l’un des champs est mal renseigné ;</li>\n<li>500 : par défaut.</li>\n</ul>\n<p>### deleteById (supprimer une ligne via son id)</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Supprimer un utilisateur */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Récupération de l'id</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n\n  <span class=\"token comment\">// Requête Mongoose - https://mongoosejs.com/docs/api.html#model_Model.findByIdAndRemove</span>\n  <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndRemove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> _id<span class=\"token operator\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Présence d'un objet de données</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> deleted</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Ligne non existante</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> not found</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans la fonction <strong>deleteById</strong>, on récupère l'id concernant afin de supprimer le document présent dans la collection Mongo via la fonction de Mongoose <code class=\"language-text\">findByIdAndRemove</code>. Puis dans le <strong>then</strong> on vérifie la présence du résultat. En effet, si ce dernier est présent, alors on renvoi un code HTTP 200 avec un message confirmant la suppression de l'utilisateur. Sinon on renvoi un code HTTP 404 spécifiant que cette utilisateur n’existe pas ou n’existe plus.</p>\n<p>Chose importante, on n’oublie pas d’exporter nos 4 fonctions.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  saveOne<span class=\"token punctuation\">,</span>\n  findAll<span class=\"token punctuation\">,</span>\n  findById<span class=\"token punctuation\">,</span>\n  updateById<span class=\"token punctuation\">,</span>\n  deleteById\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Maintenant, on peut passer à la suite :)</p>\n<h2>Middlewares</h2>\n<p>Pour les routes nécessitant un id (GET, PUT et DELETE) ou pour celles nécessitant des données (POST et PUT), il est préférable de faire la vérification en amont afin de retourner une erreur de type 400. Pour se faire, créez un nouveau dossier <strong>helpers</strong> avec un fichier <strong>middlewares.js</strong> à l’intérieur.</p>\n<p>### checkId (format de l’id)</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Appel des modules</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* Vérification format de l'object id */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkId</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mongoose<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">.</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'id form is not good'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Cette fonction permet de vérifier si l'id rentré est bien de type <strong>ObjectId</strong>. Si ce dernier n'est pas conforme, une erreur HTTP 400 est alors envoyée avec un message personnalisé.</p>\n<h3>checkContent (présence du contenu)</h3>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Vérification présence de contenu */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkContent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'missing content'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Cette fonction permet de vérifier la présence du contenu. Si ce dernier est manquant, une requête 400 est alors envoyée avec un message personnalisé.</p>\n<p>Là aussi, on n’oublie pas d’exporter nos 2 fonctions avant de poursuivre.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  checkId<span class=\"token punctuation\">,</span>\n  checkContent\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Routes</h2>\n<p>Après le modèle et les middlewares, passons enfin aux routes.</p>\n<p>ℹ️ Après chaque route créée, nous utiliserons CURL pour les requêter. Libre à vous d’utiliser un logiciel tel que Postman ou Insomnia. Il est tout à fait possible de copier-coller les requêtes CURL dans ces 2 logiciels.</p>\n<h3>Organisation</h3>\n<p>Dans le dossier <strong>routes</strong>, créez les routes <strong>index.routes.js</strong> et <strong>users.routes.js</strong>.</p>\n<p>Puis, dans le fichier <strong>index.routes.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Appel des modules</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Endpoint des utilisateurs</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v1/users'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./users.routes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Ensuite, dans le fichier <strong>users.routes.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Appel des modules</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../controllers/users.ctrl'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../helpers/middlewares'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* Ici les futures routes */</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans lequel on importe le modèle et les middlewares.</p>\n<p>Et dans le fichier <strong>index.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">morgan</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tiny'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extended<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/index.routes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>### Ajouter une ligne</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Ajouter un utilisateur - POST - /api/v1/users */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>checkContent<span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">.</span>saveOne<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>On vérifie que la requête contient des données (<code class=\"language-text\">checkContent</code>). Si le middleware détecte une erreur alors on est bon pour une erreur 400.</p>\n<p>On peut tester cette route avec la commande CURL ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i -X POST <span class=\"token punctuation\">\\</span>\n  http://localhost:3000/api/v1/users <span class=\"token punctuation\">\\</span>\n  -H <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token punctuation\">\\</span>\n  -d <span class=\"token string\">'{ \"email\": \"dardevil@marvel.com\", \"nom\": \"Murdoc\", \"prenom\": \"Matt\" }'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Afficher toutes les lignes</h3>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Liste des utilisateurs - GET - /api/v1/users */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">.</span>findAll<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>On peut tester cette route avec la commande CURL ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i http://localhost:3000/api/v1/users</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>### Afficher une ligne via son id</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Utilisateur via son ID - GET - /api/v1/users/:id */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>checkId<span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">.</span>findById<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>On vérifie que la requête comporte un id au bon format (<code class=\"language-text\">checkId</code>). Si le middleware détecte une erreur alors on est bon pour une erreur 400.</p>\n<p>On peut tester cette route avec la commande CURL ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i http://localhost:3000/api/v1/users/:id</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>### Modifier une ligne via son id</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Modifier un utilisateur via son ID - PUT - /api/v1/users/:id */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>checkId<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>checkContent<span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">.</span>updateById<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>On vérifie en amont si l'id est au bon format (<code class=\"language-text\">checkId</code>) et que la requête contient des données (<code class=\"language-text\">checkContent</code>).</p>\n<p>On peut tester cette route avec la commande CURL ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i -X PUT <span class=\"token punctuation\">\\</span>\n  http://localhost:3000/api/v1/users/:id <span class=\"token punctuation\">\\</span>\n  -H <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token punctuation\">\\</span>\n  -d <span class=\"token string\">'{ \"email\": \"dardevil@marvel.com\", \"nom\": \"Murdoc\", \"prenom\": \"Matthew\" }'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>### Supprimer une ligne via son id</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* Supprimer un utilisateur via son ID - DELETE - /api/v1/users/:id */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>checkId<span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">.</span>deleteById<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>On vérifie en amont si l’id est au bon format (<code class=\"language-text\">checkId</code>). Si le middleware détecte une erreur alors on est bon pour une erreur 400.</p>\n<p>On peut tester cette route avec la commande CURL ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i -X DELETE http://localhost:3000/api/v1/users/:id</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>Refactoring</h2>\n<p>Avant de passer aux tests, il serait bien de revoir un peu ce code...</p>\n<h3>Centraliser les messages</h3>\n<p>Nous allons ranger tous ces messages dans un seul fichier. Cela va nous permettre, lors de la rédaction des tests de ne pas avoir à les réécrire.</p>\n<p>Dans le dossier <strong>helpers</strong>, créez un nouveau fichier <strong>messages.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  idNotAnObjectId<span class=\"token operator\">:</span> <span class=\"token string\">'id form is not good'</span><span class=\"token punctuation\">,</span>\n  emptyFields<span class=\"token operator\">:</span> <span class=\"token string\">'missing content'</span><span class=\"token punctuation\">,</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    nothing<span class=\"token operator\">:</span> <span class=\"token string\">'no users available'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">notFound</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> not found</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">created</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> created</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">updated</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> updated</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">deleted</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> deleted</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    emailExisting<span class=\"token operator\">:</span> <span class=\"token string\">'this address email already existing'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Modifiez les fichiers <strong>middlewares.js</strong> et <strong>users.ctrl.js</strong> en conséquence après avoir chargé le fichier.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Appel des modules</span>\n<span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../helpers/messages'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Ancienne syntaxe</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> not found</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Nouvelle syntaxe</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">notFound</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Lors de l'ajout d'un utilisateur.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">message<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">created</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>Format de l'email</h3>\n<p>Par pure fainéantise, nous allons installer le plugin <strong>validator</strong> <code class=\"language-text\">npm install validator</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Nom</th>\n<th>Description</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>validator</td>\n<td>Vérifie le format d'une adresse email</td>\n<td>13.0.0</td>\n</tr>\n</tbody>\n</table>\n<p>Dans le fichier <strong>users.model.js</strong>, importez cette dépendance.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> validator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'validator'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Puis modifiez le schéma de la clef email.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  validate<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>validator<span class=\"token punctuation\">.</span>isEmail<span class=\"token punctuation\">,</span> <span class=\"token string\">'invalid email'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Testez avec une erreur d'email.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i -X POST <span class=\"token punctuation\">\\</span>\n  http://localhost:3000/api/v1/users <span class=\"token punctuation\">\\</span>\n  -H <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token punctuation\">\\</span>\n  -d <span class=\"token string\">'{ \"email\": \"dardevil@marvel\", \"nom\": \"Murdoc\", \"prenom\": \"Matthew\" }'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Avec le message d'erreur correspondant.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">422</span> Unprocessable Entity\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"users validation failed: email: invalid email\"</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>Serveur</h3>\n<p>Pour le serveur, on va scinder l'actuel fichier <strong>index.js</strong> en 2.</p>\n<p>A la racine du projet <strong>api</strong>, créez un nouveau fichier <strong>app.js</strong> qui contiendra l'appel des routes.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Appel des modules</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> morgan <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'morgan'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config/db.config'</span><span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Initialisation d'Express</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Activation du log des routes</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">morgan</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tiny'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extended<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/index.routes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Et le contenu allégé du fichier <strong>index.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Appel des modules</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./app'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Variables d'environnement</span>\n<span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_HOST</span> <span class=\"token operator\">||</span> <span class=\"token string\">'0.0.0.0'</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span>\n\n<span class=\"token comment\">// Démarrage du serveur</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Running on http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - Environnement : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans le fichier <strong>index.routes.js</strong>, avant le <code class=\"language-text\">module.exports</code>, ajoutez les 2 routes supprimées du fichier <strong>index.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Route d'accueil</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'Hello World!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Routes non définies = 404</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'page not found'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On est paré pour passer aux tests :)</p>\n","download":"","tags":[{"title":"API","path":"/tag/API/"},{"title":"Mongo","path":"/tag/Mongo/"},{"title":"Docker","path":"/tag/Docker/"}],"parts":[{"title":"Une API REST avec Express et Mongo : Préparatifs","href":"une-api-rest-avec-express-et-mongo-preparatifs"},{"title":"Une API REST avec Express et Mongo : Développement","href":""},{"title":"Une API REST avec Express et Mongo : Tests automatisés","href":"none"}]}},"context":{}}