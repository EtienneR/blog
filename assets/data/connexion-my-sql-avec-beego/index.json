{"hash":"e9e710b63b02d049a9f8a5359c5c22618737fe2f","data":{"post":{"title":"Connexion MySQL avec Beego","date":"17 January 2015","content":"<p>Nous allons dans cet article, connecter le framework à une BDD (Base De Données) de type MySQL via l'ORM (Object-Relational Mapping) fournis par Beego. Il est tout à fait possible de se servir d'un autre type de BDD comme PostgreSQL et SQlite3 (officiellement supportées, mais vous pouvez tester avec d'autres drivers de BDD).</p>\n<h2>Création du premier modèle</h2>\n<p>Dans le répertoire \"models\", on crée un fichier que l'on nomme \"models.go\" :</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> models</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Puis, on importe la bibliothèque \"Time\" :</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Ensuite, on déclare la structure basique de notre future table \"articles\" :</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Articles <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Id      <span class=\"token builtin\">int</span>       <span class=\"token string\">`form:\"-\"`</span>\n    Title   <span class=\"token builtin\">string</span>    <span class=\"token string\">`form:\"title\" required`</span>\n    Content <span class=\"token builtin\">string</span>    <span class=\"token string\">`orm:\";type(text)\" form:\"content,textarea\"`</span>\n    Created time<span class=\"token punctuation\">.</span>Time <span class=\"token string\">`orm:\"auto_now_add;type(datetime)\"`</span>\n    Updated time<span class=\"token punctuation\">.</span>Time <span class=\"token string\">`orm:\"auto_now;type(datetime)\"`</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On précise à l'ORM que l'on veut un champ de type texte et non un champ de type \"varchar\" pour le champ \"content\".<br>\nAvec l'aide de la librairie \"Time\" native de Go, on implémente 2 champs de type \"datetime\".</p>\n<p>Puis on renvoie notre structure à travers une fonction :</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>Articles<span class=\"token punctuation\">)</span> <span class=\"token function\">TableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"articles\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Et c'est tout pour notre unique modèle !</p>\n<h2>Connexion à la base de données</h2>\n<p>Dans cette partie, on va utiliser le fichier de configuration de Beego. Pour cela, ouvrez le fichier \"app.conf\" présent dans le dossier \"conf\".<br>\nOn va ajouter 5 variables dont les valeurs seront :</p>\n<ul>\n<li>Le type de base de données (\"mysql\", \"sqlite3\", etc…).</li>\n<li>Le nom d'utilisateur de la BDD</li>\n<li>Le mot de passe de l'utilisateur</li>\n<li>L'URL du serveur de la BDD</li>\n<li>Le nom de la base utilisée pour ce projet</li>\n</ul>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">data_type <span class=\"token operator\">=</span> <span class=\"token string\">\"mysql\"</span>\ndata_user <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span>\ndata_pass <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\ndata_urls <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span>\ndata_db   <span class=\"token operator\">=</span> <span class=\"token string\">\"beego_test\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Sur votre BDD MySQL, créez une nouvelle base que vous nommez \"beego_test\".</p>\n<p>Les cinq variables ci-dessus vont être utilisées dans le fichier \"main.go\" (présent à la racine de votre projet). Ouvrez ce fichier.</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"github.com/astaxie/beego\"</span>\n    <span class=\"token boolean\">_</span> <span class=\"token string\">\"myapp/routers\"</span>\n    models <span class=\"token string\">\"myapp/models\"</span>\n    <span class=\"token string\">\"github.com/astaxie/beego/orm\"</span>\n    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/go-sql-driver/mysql\"</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Comme vous pouvez le constater, on importe le modèle, les bibliothèques pour l'ORM de Beego et le driver de MySQL.</p>\n<p>Attention : le driver de MySQL en Go doit être présent dans le dossier \"%gopath%/src/github.com/go-sql-driver/mysql\".<br>\nSi ce n'est pas le cas (par défaut), lancez la commande pour l'installer :<br>\n<code class=\"language-text\">go get github.com/go-sql-driver/mysql</code></p>\n<p>Puis, on passe à la fonction \"init\" :</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    orm<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterDriver</span><span class=\"token punctuation\">(</span>beego<span class=\"token punctuation\">.</span>AppConfig<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data_type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> orm<span class=\"token punctuation\">.</span>DR_MySQL<span class=\"token punctuation\">)</span>\n    orm<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterDataBase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span> beego<span class=\"token punctuation\">.</span>AppConfig<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data_type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beego<span class=\"token punctuation\">.</span>AppConfig<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysqluser\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>beego<span class=\"token punctuation\">.</span>AppConfig<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"@/\"</span><span class=\"token operator\">+</span>beego<span class=\"token punctuation\">.</span>AppConfig<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysqldb\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"?charset=utf8&amp;loc=Europe%2FParis\"</span><span class=\"token punctuation\">)</span>\n    orm<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterModel</span><span class=\"token punctuation\">(</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Articles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Sur la première ligne, on précise l'utilisation du driver de MySQL à l'ORM puis sur la seconde, on lui indique le DSN (Data Source Name) pour pouvoir se connecter sur notre serveur de BDD et sur la troisième et dernière ligne, on charge notre modèle.</p>\n<p>A noter : il est notamment possible de créer plusieurs connexions sur différentes BDD avec Beego.</p>\n<h2>Gestion des erreurs de connexion</h2>\n<p>Lors du démarrage de votre serveur, on exécute une fonction qui permet d'afficher une erreur, si le serveur de BDD n'est pas lancé mais aussi de générer la table présente dans le modèle si cette dernière n'existe pas. Dans notre cas, la table \"articles\".\nPour ce faire, dans la fonction suivante (\"main\"), du fichier \"main.go\" ajoutez avant \"beego.Run()\" :</p>\n<div class=\"gridsome-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name    <span class=\"token operator\">:=</span> <span class=\"token string\">\"default\"</span>\n    force   <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n    verbose <span class=\"token operator\">:=</span> <span class=\"token boolean\">true</span>\n\n    err <span class=\"token operator\">:=</span> orm<span class=\"token punctuation\">.</span><span class=\"token function\">RunSyncdb</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> force<span class=\"token punctuation\">,</span> verbose<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        beego<span class=\"token punctuation\">.</span><span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    beego<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>\"name\" : on utilise la connexion \"default\" définit dans la fonction \"init\"</li>\n<li>\"force\" : si vaut \"true\", alors l'ORM écrase (sans sommation) la table.</li>\n<li>\"verbose\" : affiche la connexion dans la console du serveur.</li>\n</ul>\n<p>Ci-dessous, les 3 types de messages possibles renvoyés dans la console du serveur (si \"verbose\" vaut \"true\").<br>\nLe serveur de BDD n'est pas démarré / non accessible :</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>ORM<span class=\"token punctuation\">]</span>register db Ping <span class=\"token variable\"><span class=\"token variable\">`</span>default<span class=\"token variable\">`</span></span>, dial tcp <span class=\"token number\">127.0</span>.0.1:3306: ConnectEx tcp: Aucune connexion n<span class=\"token string\">'a pu être établie car l'</span>ordinateur cible l'a expressément refusée.\nmust have one register DataBase <span class=\"token builtin class-name\">alias</span> named <span class=\"token variable\"><span class=\"token variable\">`</span>default<span class=\"token variable\">`</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>La table \"articles\" n'existe pas :</p>\n<div class=\"gridsome-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">`</span>articles<span class=\"token punctuation\">`</span>\n    <span class=\"token comment\">-- --------------------------------------------------</span>\n    <span class=\"token comment\">--  Table Structure for `myapp/models.Articles`</span>\n    <span class=\"token comment\">-- --------------------------------------------------</span>\n    <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">`</span>articles<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">integer</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">`</span>title<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">`</span>content<span class=\"token punctuation\">`</span> <span class=\"token keyword\">longtext</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">`</span>created<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">`</span>updated<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>La table \"articles\" existe :</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">table <span class=\"token variable\"><span class=\"token variable\">`</span>articles<span class=\"token variable\">`</span></span> already exists, skip</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Remarque : si vous ajoutez un nouveau champ après avoir déjà généré la table, Beego se charge de mettre à jour la structure de votre table.</p>\n<h2>Sources</h2>\n<ul>\n<li>Driver MySQL : <a href=\"https://github.com/go-sql-driver/mysql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/go-sql-driver/mysql</a> ;</li>\n<li>Driver Postgres : <a href=\"https://github.com/lib/pq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/lib/pq</a> ;</li>\n<li>Driver Sqlite3 : <a href=\"https://github.com/mattn/go-sqlite3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/mattn/go-sqlite3</a> ;</li>\n<li>Liste des types de champs: <a href=\"http://beego.me/docs/mvc/model/models.md#model-fields-mapping-with-database-type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://beego.me/docs/mvc/model/models.md#model-fields-mapping-with-database-type</a> ;</li>\n<li>Le site officiel de Beego : <a href=\"http://beego.me\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://beego.me</a>.</li>\n</ul>\n","download":"","tags":[{"title":"Golang","path":"/tag/Golang/"},{"title":"Beego","path":"/tag/Beego/"}],"timeToRead":4,"parts":[{"title":"Installation et premiers pas sur Beego","href":"installation-et-premiers-pas-sur-beego"},{"title":"Connexion MySQL avec Beego","href":""},{"title":"Mise en place du CRUD sur Beego","href":"mise-en-place-du-crud-sur-beego"}]}},"context":{}}