{"hash":"f62c6c6cc572da4535ce1c5d24fae4305ad17d6a","data":{"post":{"title":"Un vrai mot de passe","date":"30 November 2015","content":"<p>Lorque vous développez un site web avec un dashboard (tableau de bord), vous devez mettre en place un système d'authentification. L'utilisateur devra rentrer un mot de passe que lui seul connait. Cette information est alors stockée dans une base de donnée. Hors si cette dernière se fait attaquée et les informations sont récupérées par une tiers personne, il faut que les mots de passe ne soient pas identifiables, autrement dit hachés. En PHP et dans de nombreux langages de programmations, il y a plusieurs façons de rendre ces mots de passe illisibles pour le commun des mortels.</p>\n<p><img src=\"https://i.giphy.com/X68QCGb5qx596.gif\"></p>\n<h2 id=\"md5-et-sha1-au-rebut\"><a href=\"#md5-et-sha1-au-rebut\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MD5 et SHA1 au rebut</h2>\n<p>Encoder un mot de passe avec MD5 ou SHA-1 est une chose insignifiante pour un hacker. En effet, avec une liste de Rainbow Table (énorme table de base de données de MD5 ou SHA-1 et de leur équivalent en clair), attaque par force brute (test de toutes les combinaisons) ou attaque par dictionnaire, cela ne lui prendra pas beaucoup de temps pour déchiffrer les mots de passe de votre BDD.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">sha1</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span></code></pre>\n<p><img src=\"https://i.giphy.com/uwm78X7lrvpdu.gif\"></p>\n<p>Cette méthode est décommendée de vive voix !</p>\n<h2 id=\"du-salt-avec-sha-512--cum-grano-salis\"><a href=\"#du-salt-avec-sha-512--cum-grano-salis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Du salt avec SHA-512 : \"cum grano salis\"</h2>\n<p>L'intéret du salt (ou clef secrète), c'est de \"casser\" la Rainbow Table en y mettant son grain de sel (\"cum grano salis\"). En salant avant de hacher, cette méthode est loin d'être infaillible car si le hacker trouve la clef secrète alors il pourra modifier son attaque en prenant en compte cette dernière.</p>\n<p><img src=\"https://web.archive.org/web/20190509213043im_/http://i.giphy.com/11HOmFD2Fk1gaY.gif\"></p>\n<p>Depuis la version 5.1.2 de PHP, il existe une fonction hash_hmac() qui permet de générer ce genre de mot de passe rapidement :</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">hashPassword</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$hash</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'sha512'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$salt</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'clef secrete'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">hash_hmac</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$hash</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$salt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">hashPassword</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// mot de passe haché</span>\n\n    <span class=\"token comment\">// MDP stocké en BDD</span>\n    <span class=\"token variable\">$passwordCrypted</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'f4368737ffe88088e26b19099b408b6d9e0af4f103807541ad472d7fbd644f3da41903aa55d5a29155649a84ec2b52e12957754c196b415901e1bb45d7533a10'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$passwordCrypted</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// MDP saisie par l'utilisateur == MDP en BDD</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hashPassword</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$passwordCrypted</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'Le mot de passe est valide :)'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'Mauvais mot de passe :('</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$passwordCrypted</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span></code></pre>\n<p>Pour le hachage, il existe d'autres méthodes que \"sha512\" comme \"md5\", \"sha256\", \"haval160,4\", etc... vous pouvez obtenir la liste complète avec la fonction <code class=\"language-text\">hash_algos()</code> :</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash_algos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span></code></pre>\n<h2 id=\"addition-salée-avec-bcrypt\"><a href=\"#addition-sal%C3%A9e-avec-bcrypt\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Addition salée avec Bcrypt</h2>\n<p>Avec Bcrypt, le salt n'est plus statique comme vue précédement mais généré aléatoirement ce qui a pour effet de générer un hash aléatoire du mot de passe.</p>\n<p><img src=\"https://i.giphy.com/ph7prW5qPhrZC.gif\"></p>\n<p>L'algorithme utilisé par Bcrypt pour créer la clef de hachage est \"CRYPT_BLOWFISH\" via \"PASSWORD_BCRYPT\" à partir de la version 5.5.0 de PHP.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'cost'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>                                         <span class=\"token comment\">// Cout algorithmique</span>\n        <span class=\"token single-quoted-string string\">'salt'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">mcrypt_create_iv</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MCRYPT_DEV_URANDOM</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// Salt automatique</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Génération du MDP</span>\n    <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token function\">password_hash</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PASSWORD_BCRYPT</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Valeur aléatoire générée du MDP stocké en BDD</span>\n    <span class=\"token variable\">$passwordCrypted</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'$2y$11$pzXo0hIts06Tfcshew8HQeVmP8eY2bxcsChtslGLbzxrHbXDs0L9i'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$passwordCrypted</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Récupération du MDP saisie par l'utilisateur</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">password_verify</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$passwordCrypted</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'Le mot de passe est valide :)'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'Le mot de passe est invalide :('</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$passwordCrypted</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span></code></pre>\n<p>Quelques informations sur le mot de passe haché :</p>\n<ul>\n<li>\"$2y\" : identifiant de la clef de hachage standard de crypt()</li>\n<li>\"$11\" : niveau de difficulté (paramètre \"cost\" dans les options)</li>\n<li>\"$pzXo0hIts06Tfcshew8HQeVmP8eY2bxcsChtslGLbzxrHbXDs0L9i\" : le sel et le mot de passe en base6</li>\n</ul>\n<p>Quant à la longueur totale du MDP haché, elle sera toujours de 60 caractères.</p>\n<p>Remarque : pour utiliser Bcrypt, il faut que l'extension PHP \"mcrypt\" soit installée et activée sur votre serveur PHP.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>Avoir des données protégées est un gage de confiance vis à vis des internautes inscris. Pour plus de sécurité, vous pouvez appliquer des règles lors de la création du compte en demandant à l'utilisateur au moins une majuscule et un caractère spécial lors de la création de son mot de passe.</p>\n<h2 id=\"sources\"><a href=\"#sources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sources</h2>\n<ul>\n<li>Inspiration pour cet article : <a href=\"https://linuxfr.org/users/elyotna/journaux/l-art-de-stocker-des-mots-de-passe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://linuxfr.org/users/elyotna/journaux/l-art-de-stocker-des-mots-de-passe</a></li>\n<li>Fonction <code class=\"language-text\">hash_hmac</code> : <a href=\"http://php.net/manual/fr/function.hash-hmac.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://php.net/manual/fr/function.hash-hmac.php</a></li>\n<li>Fonction <code class=\"language-text\">password_hash</code> : <a href=\"http://php.net/manual/fr/function.password-hash.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://php.net/manual/fr/function.password-hash.php</a></li>\n<li>Fonction <code class=\"language-text\">password_verify</code> :<a href=\"http://php.net/manual/fr/function.password-verify.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://php.net/manual/fr/function.password-verify.php</a></li>\n<li>Rainbox table : <a href=\"https://fr.wikipedia.org/wiki/Rainbow_table\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fr.wikipedia.org/wiki/Rainbow_table</a></li>\n<li>Attaque par dictionnaire : <a href=\"https://fr.wikipedia.org/wiki/Attaque_par_dictionnaire\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fr.wikipedia.org/wiki/Attaque_par_dictionnaire</a></li>\n<li>Attaque par force brute : <a href=\"https://fr.wikipedia.org/wiki/Attaque_par_force_brute\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fr.wikipedia.org/wiki/Attaque_par_force_brute</a></li>\n<li>Le salage en cryptographie : <a href=\"https://fr.wikipedia.org/wiki/Salage_%28cryptographie%29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fr.wikipedia.org/wiki/Salage_%28cryptographie%29</a></li>\n<li>Algorithme Blowfish : <a href=\"https://fr.wikipedia.org/wiki/Blowfish\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fr.wikipedia.org/wiki/Blowfish</a></li>\n<li>La fin de SHA-1 : <a href=\"http://www.silicon.fr/sha-1-algorithme-clef-chiffrement-https-plus-securise-129087.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.silicon.fr/sha-1-algorithme-clef-chiffrement-https-plus-securise-129087.html</a></li>\n<li>Sites qui vont vous faire oublier le MD5 et le SHA1 : <a href=\"https://md5hashing.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://md5hashing.net</a> - <a href=\"http://hashtoolkit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://hashtoolkit.com</a></li>\n<li>Mots de passe les plus utilisés en 2014 : <a href=\"http://www.sudouest.fr/2015/01/21/internet-le-top-25-des-mots-de-passe-que-vous-devriez-eviter-1804735-5166.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.sudouest.fr/2015/01/21/internet-le-top-25-des-mots-de-passe-que-vous-devriez-eviter-1804735-5166.php</a></li>\n</ul>\n"}},"context":{}}