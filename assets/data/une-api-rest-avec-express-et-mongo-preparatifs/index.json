{"hash":"e9e710b63b02d049a9f8a5359c5c22618737fe2f","data":{"post":{"title":"Une API REST avec Express et Mongo : Préparatifs","date":"30 April 2020","content":"<p>Ensemble, nous allons construire une API REST propulsée par Express.js et Mongo. Cette API communiquera uniquement au format JSON. Ce tutoriel est destiné à un public connaissant les bases en JavaScript et en HTTP. Express est un framework (un des plus connu) sur Node.js. Il permet de créer des applications Web de façon simplifiée. Quant à Mongo, c’est une base de données dite “nosql”. Pas de panique, nous allons voir ensemble, les requêtes basiques (créer, lire, modifier et supprimer des données) via Mongoose. De plus cette API sera encapsulée dans Docker afin de faciliter son intégration continue. Libre à vous ne pas utiliser cet outil de virtualisation.</p>\n<p>Avant de se lancer à bras ouverts dans la création de notre API REST, mettons en place notre stack technique. Pour cela on aura 2 services distincts :</p>\n<ul>\n<li>La base de données : Mongo ;</li>\n<li>L'application back-end : l'API.</li>\n</ul>\n<h2>Installation des modules</h2>\n<p>En premier lieu, assurez-vous d’avoir Node et NPM installés sur votre machine.<br>\n<code class=\"language-text\">node -v &amp;&amp; npm -v</code></p>\n<p>Si ce n’est pas le cas, rendez-vous sur le site officiel <a href=\"https://nodejs.org/en/download\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nodejs.org/en/download</a>.</p>\n<p>ℹ️ Ce tutoriel a été rédigé avec la version de 12.16.3 de Node et 6.14.4 de NPM.</p>\n<p>Créez un nouveau dossier <strong>services</strong> puis à l’intérieur, un nouveau dossier <strong>api</strong>.</p>\n<p><code class=\"language-text\">mkdir services &amp;&amp; cd services &amp;&amp; mkdir api &amp;&amp; cd api</code></p>\n<p>Lancez la commande ci-dessous pour initialiser l’application.</p>\n<p><code class=\"language-text\">npm init -y</code></p>\n<p>Outre Express, nous allons utiliser un ensemble de modules référencés dans le tableau ci-dessous.</p>\n<table>\n<thead>\n<tr>\n<th>Nom</th>\n<th>Description</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Express</td>\n<td>Framework Web</td>\n<td>4.17.1</td>\n</tr>\n<tr>\n<td>Mongoose</td>\n<td>Connecteur MongoDB et ODM (Object Document Mapper : équivalent d’un ORM pour BDD no-sql)</td>\n<td>5.7.1</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">npm install express mongoose morgan supertest</code></p>\n<p>Ces paquets apparaîtront dans la catégorie <strong>dependencies</strong> (dépendances utiles à un fonctionnement en production).</p>\n<p>Si vous utilisez une version de NPM inférieure à la 5, utilisez le flag <code class=\"language-text\">--save</code> pour avoir ces modules dans le manifeste.</p>\n<table>\n<thead>\n<tr>\n<th>Nom</th>\n<th>Description</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Jest</td>\n<td>Tests automatisés</td>\n<td>25.3.0</td>\n</tr>\n<tr>\n<td>Morgan</td>\n<td>Afficher les logs dans le terminal</td>\n<td>1.10.0</td>\n</tr>\n<tr>\n<td>Nodemon</td>\n<td>Service de redémarrage automatique</td>\n<td>2.0.3</td>\n</tr>\n<tr>\n<td>Supertest</td>\n<td>Effectuer des tests avec HTTP</td>\n<td>4.0.2</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">npm install jest morgan nodemon supertest --save-dev</code></p>\n<p>Ces paquets apparaîtront dans la catégorie <strong>devDependencies</strong> (dépendances utiles uniquement dans le cadre du développement).</p>\n<p>Vous pouvez retrouver toutes ces informations dans le manifeste <strong>package.json</strong>.</p>\n<p>Modifiez ce fichier en ajoutant une commande pour exécuter Nodemon.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node_modules/.bin/nodemon\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Environnement de développement</h2>\n<p>A la racine du projet, créez un fichier <strong>.dev.env</strong>. Comme son nom l’indique, ce fichier ne servira que pour l’environnement de développement.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token assign-left variable\">NODE_ENV</span><span class=\"token operator\">=</span>development\n\n<span class=\"token assign-left variable\">API_HOST</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0\n<span class=\"token assign-left variable\">API_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">3000</span>\n\n<span class=\"token assign-left variable\">MONGO_HOST</span><span class=\"token operator\">=</span>mongo\n<span class=\"token assign-left variable\">MONGO_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">27017</span>\n<span class=\"token assign-left variable\">MONGO_INITDB_DATABASE</span><span class=\"token operator\">=</span>mydatabase\n<span class=\"token assign-left variable\">MONGO_INITDB_ROOT_USERNAME</span><span class=\"token operator\">=</span>root\n<span class=\"token assign-left variable\">MONGO_INITDB_ROOT_PASSWORD</span><span class=\"token operator\">=</span>password</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans un premier temps, on déclare l’URL et le port du serveur de notre API. Et dans un second temps, les informations relatives à notre BDD (adresse, port, nom de la base, nom de l’utilisateur et mot de passe).</p>\n<h2>Première route</h2>\n<p>A la racine du dossier <strong>api</strong>, créez le fichier <strong>index.js</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Appel des modules</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> morgan <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'morgan'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Variables d'environnement</span>\n<span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_HOST</span> <span class=\"token operator\">||</span> <span class=\"token string\">'0.0.0.0'</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span>\n\n<span class=\"token comment\">// Initialisation d'Express</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Activation du log des routes</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">morgan</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tiny'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Route d'accueil</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'Hello World!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Routes non définies = 404</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'page not found'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Démarrage du serveur</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Running on http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - Environnement : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>req</strong> est le diminutif de <strong>request</strong> et <strong>res</strong> de <strong>response</strong>. Le 1^er^ concerne tout ce qui rentre (données saisies par l’utilisateur par exemple) et le second tout ce que retourne le serveur. Ici, une réponse (en 200 par défaut) au format JSON.</p>\n<p>ℹ️ Les lignes concernant l’adresse et le port (6 et 7), la condition “ou” (symbolisée par les doubles pipes) permet de définir une valeur si le fichier d’environnement est inexistant.</p>\n<p>Vous pouvez lancer le serveur Nodemon en allant dans le répertoire API afin de lancer la commande ci-dessous.</p>\n<p><code class=\"language-text\">npm run dev</code></p>\n<p>Extrait de la console.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token operator\">></span> nodemon\n\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> <span class=\"token number\">2.0</span>.3\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> to restart at any time, enter <span class=\"token variable\"><span class=\"token variable\">`</span>rs<span class=\"token variable\">`</span></span>\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching path<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: *.*\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching extensions: js,mjs,json\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> starting <span class=\"token variable\"><span class=\"token variable\">`</span>node index.js<span class=\"token variable\">`</span></span>\nRunning on http://0.0.0.0:3000 - Environnement <span class=\"token builtin class-name\">:</span> undefined\nGET / <span class=\"token number\">200</span> <span class=\"token number\">26</span> - <span class=\"token number\">4.811</span> ms\nGET /fake <span class=\"token number\">404</span> <span class=\"token number\">28</span> - <span class=\"token number\">0.802</span> ms</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Puis l’arrêter avec la combinaison des touches CTRL + C car nous allons utiliser Docker.</p>\n<h2>Dockerisons</h2>\n<p>Cette étape de configuration des containers nécessite du temps. Pour autant, elle n’est pas négligeable car elle permettra par la suite, à n’importe quel développeur souhaitant participer à ce projet d’en gagner. Pour ce faire, nous allons créer 2 containers distincts à partir de 2 images distinctes. Le premier pour la BDD et le second, pour l’API.\nAvant de poursuivre, vérifiez que Docker et Docker Compose sont installés sur votre machine.  </p>\n<p><code class=\"language-text\">docker version &amp;&amp; docker-compose version</code></p>\n<p>Si ce n’est pas le cas, rendez-vous sur le site officiel <a href=\"https://docs.docker.com/install/#releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/install/#releases</a> et <a href=\"https://docs.docker.com/compose/install/#install-compose\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/compose/install/#install-compose</a></p>\n<p>ℹ️ Ce tutoriel a été rédigé avec la version 19.03.8 de Docker et 1.17.1 de Docker Compose.</p>\n<p>A la racine de votre application, créez un fichier nommé <strong>docker-compose.yml</strong>.</p>\n<h3>Service Mongo</h3>\n<p>Pour la base de données, c’est relativement rapide car il existe déjà une image officielle toute prête pour MongoDB.</p>\n<div class=\"gridsome-highlight\" data-language=\"yml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yml line-numbers\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mongo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mongo<span class=\"token punctuation\">:</span>4.2.5<span class=\"token punctuation\">-</span>bionic\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./.dev.env\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./services/mongo/data<span class=\"token punctuation\">:</span>/data/db\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 27017<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Nous utiliserons la version 4 de Mongo. On veut que le container redémarre à chaque démarrage de Docker (donc à chaque redémarrage de votre machine). On veut que le fichier d’environnement <strong>.dev.env</strong> soit pris en compte. On utilise le port par défaut de Mongo 27017. On veut aussi stocker les données de la BDD dans le dossier <strong>services/mongo/data</strong>.</p>\n<p>ℹ️ Ce dossier sera créé automatiquement lors de la première construction du container.</p>\n<h3>Service API</h3>\n<p>Quant à l’API il existe également une image officielle pour Node.js (de préférence, la version Alpine pour avoir une image légère). Dans le dossier <strong>api</strong>, créez un nouveau fichier <strong>Dockerfile</strong>.</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>12.16.3<span class=\"token punctuation\">-</span>alpine\n<span class=\"token keyword\">COPY</span> . /app\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token keyword\">RUN</span> npm install\n<span class=\"token keyword\">VOLUME</span> /app</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Puis dans le fichier <strong>docker-compose.yml</strong>, à la suite, en tant que service (en respectant bien l’indentation) et dépendant du service “mongo”.</p>\n<div class=\"gridsome-highlight\" data-language=\"yml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yml line-numbers\"><code class=\"language-yml\"><span class=\"token key atrule\">api</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./services/api\n  <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ./services/api<span class=\"token punctuation\">:</span>/app\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> 3000<span class=\"token punctuation\">:</span><span class=\"token number\">3000</span>\n  <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ./.dev.env\n  <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> mongo\n  <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> npm run dev</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Nos 2 containers étant déclarés dans le fichier d’instructions, lancez la commande ci-dessous.</p>\n<p><code class=\"language-text\">docker-compose up -d</code></p>\n<p>Cette commande va télécharger les 2 images depuis le Docker Hub puis créer nos 2 containers.<br>\nVous pouvez également accéder au serveur Mongo depuis votre terminal.</p>\n<p><code class=\"language-text\">docker-compose exec mongo bash</code></p>\n<p>Puis l'authentification.</p>\n<p><code class=\"language-text\">mongo -u root -p password --authenticationDatabase admin</code></p>\n<p>C'est bon, vous y êtes même si dans ce tutoriel, on n'aura pas vocation à toucher à cette partie.<br>\nEt le plus important étant d'afficher les logs.</p>\n<p><code class=\"language-text\">docker-compose logs -f</code></p>\n<p>ℹ️ Si vous n’utilisez pas Docker, vous pouvez vous servir du package <a href=\"https://www.npmjs.com/package/dotenv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dotenv</a> pour lire le fichier d’environnement.</p>\n<h2>Conclusion</h2>\n<p>On est paré au développement pour la seconde partie de ce tutoriel.</p>\n","download":"https://github.com/EtienneR/api_rest_express_mongo_docker","tags":[{"title":"API","path":"/tag/API/"},{"title":"Mongo","path":"/tag/Mongo/"},{"title":"Docker","path":"/tag/Docker/"}],"timeToRead":6,"parts":[{"title":"Une API REST avec Express et Mongo : Préparatifs","href":""},{"title":"Une API REST avec Express et Mongo : Développement","href":"une-api-rest-avec-express-et-mongo-developpement"},{"title":"Une API REST avec Express et Mongo : Tests automatisés","href":"une-api-rest-avec-express-et-mongo-tests-automatises"}]}},"context":{}}