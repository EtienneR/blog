{"hash":"b0515404f5f9844bba399d0440c3ce1a21b69ad3","data":{"post":{"title":"API Restful sur Codeigniter 3","date":"15 April 2015","content":"<p>Après trois RC (Release Candidate), Codeigniter 3 est sorti ! Parmi les nouveautés qu'il compte, la possibilité de travailler avec les méthodes HTTP GET, POST mais également PUT et DELETE. Cela rend plus facile à mettre en place une API Restful par rapport à la version précédente du framework. Quant à la base de données, on va rester sur une base SQL.</p>\n<h2 id=\"schéma-simplifié\"><a href=\"#sch%C3%A9ma-simplifi%C3%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Schéma simplifié</h2>\n<p>On va uniquement travailler sur un contrôleur \"Product.php\" accompagné de son modèle \"Model_product.php\". Et on finira par configurer les routes dans le fichier \"routes.php\".</p>\n<pre class=\"language-text\"><code class=\"language-text\">├───controllers\n│   │\n│   └───api\n│       └───v1\n│               Product.php\n├───config\n│       routes.php\n├───models\n│       Model_product.php</code></pre>\n<h2 id=\"préparation-de-la-base-de-données\"><a href=\"#pr%C3%A9paration-de-la-base-de-donn%C3%A9es\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Préparation de la base de données</h2>\n<p>Avant de commencer à construire l'API, on prépare notre BDD sur MySQL ou MariaDB.</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">`</span>codeigniter3_api<span class=\"token punctuation\">`</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> utf8 <span class=\"token keyword\">COLLATE</span> utf8_unicode_ci<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">USE</span> <span class=\"token punctuation\">`</span>codeigniter3_api<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">`</span>product<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>title<span class=\"token punctuation\">`</span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Puis, on configure l'accès à la BDD dans le fichier \"config/database.php\".</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token single-quoted-string string\">'hostname'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'localhost'</span><span class=\"token punctuation\">,</span>\n<span class=\"token single-quoted-string string\">'username'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'root'</span><span class=\"token punctuation\">,</span>\n<span class=\"token single-quoted-string string\">'password'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token single-quoted-string string\">'database'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'codeigniter_api'</span><span class=\"token punctuation\">,</span></code></pre>\n<h2 id=\"création-du-modèle\"><a href=\"#cr%C3%A9ation-du-mod%C3%A8le\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Création du modèle</h2>\n<p>Dans notre modèle \"Model_product.php\", on va déclarer les 5 fonctions comportant les requêtes SQL CRUD ayant pour mission :</p>\n<ol>\n<li>Obtenir tous les produits ;</li>\n<li>Obtenir un produit en particulier ;</li>\n<li>Créer un nouveau produit ;</li>\n<li>Modifier un produit ;</li>\n<li>Supprimer un produit.</li>\n</ol>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'BASEPATH'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OR</span> <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'No direct script access allowed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Model_product</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CI_Model</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token scope\"><span class=\"token keyword\">parent</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">table</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"product\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">get_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">db</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">table</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">get_one</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">db</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"id, title\"</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">table</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">db</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n            <span class=\"token double-quoted-string string\">\"title\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">db</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">table</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n            <span class=\"token double-quoted-string string\">\"title\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$title</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">db</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">table</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">db</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">where_in</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">table</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* End of file Model_product.php */</span>\n<span class=\"token comment\">/* Location: ./application/models/Model_product.php */</span></span></code></pre>\n<h2 id=\"création-du-contrôleur\"><a href=\"#cr%C3%A9ation-du-contr%C3%B4leur\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Création du contrôleur</h2>\n<p>Dans notre contrôleur, on va retrouver les 5 fonctions que l'on a créé précédemment dans notre modèle et que l'on ajoutera dans notre fichier routes. Ces fonctions retourneront des valeurs aux formats Json et dans le bon code HTTP.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">defined</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'BASEPATH'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OR</span> <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'No direct script access allowed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CI_Controller</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token scope\"><span class=\"token keyword\">parent</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">load</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">load</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Model_product\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">Model_product</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">num_rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token variable\">$result</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"id\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token double-quoted-string string\">\"title\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$row</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"HTTP/1.0 204 No Content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"204: no products in the database\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">Model_product</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get_one</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">num_rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token variable\">$result</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"id\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token double-quoted-string string\">\"title\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$row</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"HTTP/1.0 404 Not Found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"404 : Product #<span class=\"token interpolation\"><span class=\"token variable\">$id</span></span> not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$title</span> <span class=\"token operator\">=</span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">input</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">TRUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">Model_product</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Product created'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"HTTP/1.0 400 Bad Request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"400: Empty value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$title</span> <span class=\"token operator\">=</span> <span class=\"token function\">utf8_encode</span><span class=\"token punctuation\">(</span><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">input</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">input_stream</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">TRUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">Model_product</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get_one</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">num_rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">Model_product</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"200: Product #<span class=\"token interpolation\"><span class=\"token variable\">$id</span></span> updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"HTTP/1.0 400 Bad Request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"400: Empty value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"HTTP/1.0 404 Not Found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"404: Product #<span class=\"token interpolation\"><span class=\"token variable\">$id</span></span> not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">Model_product</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get_one</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">num_rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">Model_product</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"200: Product #<span class=\"token interpolation\"><span class=\"token variable\">$id</span></span> deleted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"HTTP/1.0 404 Not Found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"404: Product <span class=\"token interpolation\"><span class=\"token variable\">$id</span></span> not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* End of file Product.php */</span>\n<span class=\"token comment\">/* Location: ./application/controllers/Product.php */</span></span></code></pre>\n<p>Dans le constructeur, on charge la connexion à la BDD et le modèle.\nPour les 2 dernières fonctions (modification et suppression), on vérifie que le produit existe.<br>\nDans la fonction <code class=\"language-text\">update</code>, on récupère les informations rentrées par l'utilisateur via la fonction <code class=\"language-text\">$this-&gt;input-&gt;input_stream</code>.</p>\n<p>Important : on active la protection contre les injections XSS avec le paramêtre \"TRUE\" pour les fonctions <code class=\"language-text\">input-&gt;post</code> et <code class=\"language-text\">input-&gt;input_stream</code>. </p>\n<p>Remarque : on convertit la valeur de l'id du ou des produit(s) en entier car par défaut, Codeigniter renvoit au format \"string\" (chaine de caractères) les données supposées être des \"int\" (entiers).</p>\n<h2 id=\"préparation-des-routes\"><a href=\"#pr%C3%A9paration-des-routes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Préparation des routes</h2>\n<p>Pour finir, éditez le fichier \"application/config/routes.php\" et ajoutez les routes ci-dessous correspondant aux fonctions présentes dans notre contrôleur.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$route</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"api/v1/product\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"get\"</span><span class=\"token punctuation\">]</span>           <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"api/v1/product\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$route</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"api/v1/product/(:num)\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"get\"</span><span class=\"token punctuation\">]</span>    <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"api/v1/product/view/<span class=\"token interpolation\"><span class=\"token variable\">$1</span></span>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$route</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"api/v1/product\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"post\"</span><span class=\"token punctuation\">]</span>          <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"api/v1/product/create\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$route</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"api/v1/product/(:num)\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"put\"</span><span class=\"token punctuation\">]</span>    <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"api/v1/product/update/<span class=\"token interpolation\"><span class=\"token variable\">$1</span></span>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$route</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"api/v1/product/(:num)\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"delete\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"api/v1/product/delete/<span class=\"token interpolation\"><span class=\"token variable\">$1</span></span>\"</span><span class=\"token punctuation\">;</span></code></pre>\n<p>On suffixe dans chaque route, la méthode HTTP concernée (GET, POST, PUT ou DELETE).</p>\n<h2 id=\"testons-avec-lami-curl\"><a href=\"#testons-avec-lami-curl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Testons avec l'ami CURL</h2>\n<h3 id=\"get\"><a href=\"#get\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GET</h3>\n<p><code class=\"language-text\">curl http://localhost/codeigniter-api/api/v1/product</code><br>\n<code class=\"language-text\">curl http://localhost/codeigniter-api/api/v1/product/1</code></p>\n<p>Remarque : vous pouvez aussi tester les requêtes HTTP de type GET sur votre navigateur Web...</p>\n<h3 id=\"post\"><a href=\"#post\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>POST</h3>\n<p><code class=\"language-text\">curl -d title=&quot;product title&quot; http://localhost/codeigniter-api/api/v1/product</code><br>\n<code class=\"language-text\">curl -d title=&quot;&lt;script src=&#39;alert&#39;&gt;alert&lt;/script&gt;&quot; http://localhost/codeigniter-api/api/v1/product</code></p>\n<h3 id=\"put\"><a href=\"#put\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PUT</h3>\n<p><code class=\"language-text\">curl -X PUT -d title=&quot;edit product title&quot; http://localhost/codeigniter-api/api/v1/product/1</code><br>\n<code class=\"language-text\">curl -X PUT -d title=&quot;&lt;script src=&#39;alert&#39;&gt;alert&lt;/script&gt;&quot; http://localhost/codeigniter-api/api/v1/product/1</code></p>\n<h3 id=\"delete\"><a href=\"#delete\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>DELETE</h3>\n<p><code class=\"language-text\">curl -X DELETE http://localhost/codeigniter-api/api/v1/product/1</code></p>\n<h2 id=\"cors\"><a href=\"#cors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CORS</h2>\n<p>Par défaut, si vous souhaitez travailler sur une application tournant sur un autre port autre que celui de votre serveur Apache, Nginx, etc... vous aurez un message d'erreur car le CORS restreint l'accès à votre API.<br>\nDans le constructeur du contrôleur, ajoutez la ligne suivante.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Access-Control-Allow-Origin: *\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>Codeigniter 3 permet de créer rapidement une API Restful grâce aux nouvelles fonctionnalitées telles que <code class=\"language-text\">$this-&gt;input-&gt;valeur</code> et la possibilité de déclarer les méthodes HTTP dans les routes. Vous pouvez également rajouter un système de vérification de token pour ajouter de la sécurité à votre API. Dans ce cas, il faudra rajouter une condition sur les fonctions concernées dans le contrôleur.</p>\n<h2 id=\"sources\"><a href=\"#sources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sources</h2>\n<ul>\n<li>php://input stream : <a href=\"http://www.codeigniter.com/userguide3/libraries/input.html#using-the-php-input-stream\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.codeigniter.com/userguide3/libraries/input.html#using-the-php-input-stream</a></li>\n<li>Les routes avec leur méthode HTTP : <a href=\"http://www.codeigniter.com/userguide3/general/routing.html#using-http-verbs-in-routes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.codeigniter.com/userguide3/general/routing.html#using-http-verbs-in-routes</a></li>\n</ul>\n"}},"context":{}}