{"hash":"b89929ffb278454bd1f8bb0277abaa50df9b43f7","data":{"post":{"title":"Dockeriser son application Angular avec Nginx en multi-stage","date":"31 August 2023","content":"<h2>Introduction</h2>\n<p>Arrive le moment où vous devez déployer votre application Angular sur Docker. Pour ce faire, on va décomposer notre Dockerfile en 2 parties. La première partie va comprendre la génération de l'application et la seconde partie, un serveur Nginx avec un fichier de configuration associé et le dossier de build de l'application.</p>\n<blockquote>\n<p>Cette notion de découpage sur Docker se nomme le <strong>multi-stage</strong>.</p>\n</blockquote>\n<p>NB : il ne s'agit pas d'un environnement de développement mais bien d'un environnement de production.</p>\n<h2>Prérequis</h2>\n<p>Pour concevoir une image Docker, il faut comprendre comment fonctionne le build d'une application sur Angular et rédiger un fichier de configuration Nginx Concernant Angular, l'application est générée à la racine du projet dans un répertoire \"dist\".</p>\n<h3>Script d'exécution</h3>\n<p>Dans le fichier \"package.json\", assurez-vous d'avoir la présence d'une commande dans la partie \"scripts\". Par exemple sur Angular CLI <code class=\"language-text\">npm run build</code> ou sur Nx <code class=\"language-text\">&quot;myapp:ci-build&quot;: &quot;nx build myapp&quot;</code>.</p>\n<h3>Script de configuration Nginx</h3>\n<p>On a besoin de mettre en place un fichier de configuration Nginx. À la racine de votre projet Angular ou Nx, créez un nouveau dossier que vous nommez \"docker\" avec un fichier \"nginx.conf\" basique avec le contenu ci-dessous.</p>\n<div class=\"gridsome-highlight\" data-language=\"nginxconf\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-nginxconf line-numbers\"><code class=\"language-nginxconf\">events { }\nhttp {\n  include /etc/nginx/mime.types;\n  server {\n    client_max_body_size 50M;\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    root /usr/share/nginx/html;\n    server_name _;\n    index index.html;\n\n    location / {\n      try_files $uri $uri/ /index.html;\n    }\n  }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Création du Dockerfile</h2>\n<p>Toujours dans le dossier \"docker\" créez un fichier \"myapp_build\".</p>\n<h3>Build de l'application</h3>\n<p>Pour la première partie de ce Dockerfile, on a besoin d'une image de NodeJS. On va donc partir sur une image légère de la distribution Linux Alpine. De préférence une version LTS (Long Term Support) de NodeJS, c'est-à-dire une version paire (exemple: 16, 18, 20, etc...). Ci-dessous, on utilise la version de NodeJS 20.5.1 de Alpine 3.18.</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>20.5.1<span class=\"token punctuation\">-</span>alpine3.18 as builder</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Ensuite, on souhaite copier le contenu des fichiers \"package.json\" et \"package-lock.json\" à la racine du container.</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">COPY</span> package.json package<span class=\"token punctuation\">-</span>lock.json ./</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Ainsi, on peut éxecuter la commande d'installation des paquets dédiées (et non <code class=\"language-text\">npm install</code>).</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">RUN</span> npm ci &amp;&amp; mkdir /ng<span class=\"token punctuation\">-</span>app &amp;&amp; mv ./node_modules ./ng<span class=\"token punctuation\">-</span>app</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Et déplacer le dossier \"node_modules\" dans un nouveau dossier \"ng-app\" que l'on définit comme le dossier d'entrée.</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">WORKDIR</span> /ng<span class=\"token punctuation\">-</span>app</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Puis on copie le contenu du dossier d'entrée (\"ng-app\") à la racine du container.</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">COPY</span> . .</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Et on construit l'application avec la commande spécifiée dans le fichier \"package.json\".</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">RUN</span> npm run myapp<span class=\"token punctuation\">:</span>ci<span class=\"token punctuation\">-</span>build</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>Serveur de l'application</h3>\n<p>À la suite du Dockerfile, on passe à l'étape du serveur avec Nginx. On part donc sur image Nginx officielle sous Alpine. Ci-dessous, la version 1.25.2 de Nginx sur Alpine 3.18.</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> nginx<span class=\"token punctuation\">:</span>1.25.2<span class=\"token punctuation\">-</span>alpine3.18</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Puis on ajoute le bon fuseau horaire (utile pour l'horodatage des logs).</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ENV</span> TZ=Europe/Paris</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>On copie le fichier de configuration de Nginx (\"nginx.conf\" présent dans le dossier \"docker\").</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">COPY</span> docker/nginx.conf /etc/nginx/nginx.conf</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>On check la syntaxe du fichier \"nginx.conf\" et on supprime le contenu répertoire par défaut de Nginx.</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">RUN</span> nginx <span class=\"token punctuation\">-</span>c /etc/nginx/nginx.conf <span class=\"token punctuation\">-</span>t &amp;&amp; rm <span class=\"token punctuation\">-</span>rf /usr/share/nginx/html/*</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Afin de le remplacer par le dossier de build que l'on va chercher dans le \"builder\". Vérifier bien le chemin (sur Angular CLI, il n'y a pas de répertoire \"apps\").</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=builder /ng<span class=\"token punctuation\">-</span>app/dist/apps/myapp /usr/share/nginx/html</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Il nous manque la gestion de la sécurité. Par défaut, l'utilisateur utilisé est \"root\". Hors, si Docker est compromis, il faut donner moins de privilèges sur l'utilisateur courant du container.</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">RUN</span> chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx /usr/share/nginx/html &amp;&amp; chmod <span class=\"token punctuation\">-</span>R 755 /usr/share/nginx/html &amp;&amp; \\\n    chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx /var/cache/nginx &amp;&amp; \\\n    chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx /var/log/nginx &amp;&amp; \\\n    chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx /etc/nginx/conf.d &amp;&amp; \\\n    touch /var/run/nginx.pid &amp;&amp; \\\n    chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx /var/run/nginx.pid\n<span class=\"token keyword\">USER</span> nginx</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Dans notre cas, on utilise l'utilisateur \"nginx\".</p>\n<h3>Dockerfile complet</h3>\n<p>Ci-dessous le Dockerfile complet.</p>\n<div class=\"gridsome-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>20.5.1<span class=\"token punctuation\">-</span>alpine3.18 as builder\n<span class=\"token keyword\">COPY</span> package.json package<span class=\"token punctuation\">-</span>lock.json ./\n<span class=\"token keyword\">RUN</span> npm ci &amp;&amp; mkdir /ng<span class=\"token punctuation\">-</span>app &amp;&amp; mv ./node_modules ./ng<span class=\"token punctuation\">-</span>app\n<span class=\"token keyword\">WORKDIR</span> /ng<span class=\"token punctuation\">-</span>app\n<span class=\"token keyword\">COPY</span> . .\n<span class=\"token keyword\">RUN</span> npm run myapp<span class=\"token punctuation\">:</span>ci<span class=\"token punctuation\">-</span>build\n\n<span class=\"token keyword\">FROM</span> nginx<span class=\"token punctuation\">:</span>1.25.2<span class=\"token punctuation\">-</span>alpine3.18\n<span class=\"token keyword\">ENV</span> TZ=Europe/Paris\n<span class=\"token keyword\">ENV</span> nginx_folder=/usr/share/nginx/html\n<span class=\"token keyword\">COPY</span> docker/nginx.conf /etc/nginx/nginx.conf\n<span class=\"token keyword\">RUN</span> nginx <span class=\"token punctuation\">-</span>c /etc/nginx/nginx.conf <span class=\"token punctuation\">-</span>t &amp;&amp; rm <span class=\"token punctuation\">-</span>rf $nginx_folder/*\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=builder /ng<span class=\"token punctuation\">-</span>app/dist/apps/myapp $nginx_folder\n<span class=\"token keyword\">RUN</span> chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx $nginx_folder &amp;&amp; chmod <span class=\"token punctuation\">-</span>R 755 $nginx_folder &amp;&amp; \\\n  chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx /var/cache/nginx &amp;&amp; \\\n  chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx /var/log/nginx &amp;&amp; \\\n  chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx /etc/nginx/conf.d &amp;&amp; \\\n  touch /var/run/nginx.pid &amp;&amp; \\\n  chown <span class=\"token punctuation\">-</span>R nginx<span class=\"token punctuation\">:</span>nginx /var/run/nginx.pid\n<span class=\"token keyword\">USER</span> nginx</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Tester localement</h2>\n<p>Avant d'envoyer directement en production, il est fortement recommandé de vérifier que le container tourne bien en local.</p>\n<h3>Création de l'image</h3>\n<p>On créé une image Docker que l'on nomme \"mynodeimage\" via le paramètre <code class=\"language-text\">-t</code> et qui va chercher le bon fichier via le paramètre <code class=\"language-text\">-f</code> dans le dossier \"docker\".</p>\n<p><code class=\"language-text\">docker build -t mynodeimage -f docker/myapp_build .</code></p>\n<p>À la première exécution de cette commande, Docker va récupérer les 2 images Alpine, cela peut prendre un certains temps.</p>\n<h3>Création du conteneur</h3>\n<p>Par défaut, le port entrant de Nginx est le 80 (coté Docker). En sortie, on veut le port 1234.</p>\n<p><code class=\"language-text\">docker run -d -p 1234:80 --name my_container mynodeimage</code></p>\n<p>On vérifie que le container s'est bien lancé (statut \"up\") et tourne sur le port 80 vers le port 1234.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">docker <span class=\"token function\">ps</span>\n372136f252e1   mynodeimage            <span class=\"token string\">\"/docker-entrypoint.…\"</span>   <span class=\"token number\">9</span> minutes ago   Up <span class=\"token number\">9</span> minutes    <span class=\"token number\">0.0</span>.0.0:1234-<span class=\"token operator\">></span><span class=\"token number\">80</span>/tcp, :::1234-<span class=\"token operator\">></span><span class=\"token number\">80</span>/tcp            my_container</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Et normalement, l'application est accessible sur <a href=\"http://localhost:1234\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:1234</a>.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i http://localhost:1234\nHTTP/1.1 <span class=\"token number\">200</span> OK\nServer: nginx/1.25.2\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On peut également vérifier la présence des logs (avec le bon timezone).</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">docker logs -f my_container\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking <span class=\"token keyword\">for</span> shell scripts <span class=\"token keyword\">in</span> /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n<span class=\"token number\">10</span>-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n<span class=\"token number\">10</span>-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 <span class=\"token keyword\">in</span> /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n/docker-entrypoint.sh: Configuration complete<span class=\"token punctuation\">;</span> ready <span class=\"token keyword\">for</span> start up\n<span class=\"token number\">172.17</span>.0.1 - - <span class=\"token punctuation\">[</span><span class=\"token number\">24</span>/Aug/2023:15:24:37 +0200<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET / HTTP/1.1\"</span> <span class=\"token number\">200</span> <span class=\"token number\">579</span> <span class=\"token string\">\"-\"</span> <span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0\"</span>\n<span class=\"token number\">172.17</span>.0.1 - - <span class=\"token punctuation\">[</span><span class=\"token number\">24</span>/Aug/2023:15:24:37 +0200<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET /styles.ef46db3751d8e999.css HTTP/1.1\"</span> <span class=\"token number\">200</span> <span class=\"token number\">0</span> <span class=\"token string\">\"http://localhost:1234/\"</span> <span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0\"</span>\n<span class=\"token number\">172.17</span>.0.1 - - <span class=\"token punctuation\">[</span><span class=\"token number\">24</span>/Aug/2023:15:24:37 +0200<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET /polyfills.f0c7e92599cba58e.js HTTP/1.1\"</span> <span class=\"token number\">200</span> <span class=\"token number\">33827</span> <span class=\"token string\">\"http://localhost:1234/\"</span> <span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0\"</span>\n<span class=\"token number\">172.17</span>.0.1 - - <span class=\"token punctuation\">[</span><span class=\"token number\">24</span>/Aug/2023:15:24:37 +0200<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET /main.c8da166aa81518c1.js HTTP/1.1\"</span> <span class=\"token number\">200</span> <span class=\"token number\">128722</span> <span class=\"token string\">\"http://localhost:1234/\"</span> <span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0\"</span>\n<span class=\"token number\">172.17</span>.0.1 - - <span class=\"token punctuation\">[</span><span class=\"token number\">24</span>/Aug/2023:15:24:37 +0200<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET /runtime.4a60012eff6e45d5.js HTTP/1.1\"</span> <span class=\"token number\">200</span> <span class=\"token number\">916</span> <span class=\"token string\">\"http://localhost:1234/\"</span> <span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0\"</span>\n<span class=\"token number\">172.17</span>.0.1 - - <span class=\"token punctuation\">[</span><span class=\"token number\">24</span>/Aug/2023:15:24:37 +0200<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET /favicon.ico HTTP/1.1\"</span> <span class=\"token number\">200</span> <span class=\"token number\">948</span> <span class=\"token string\">\"http://localhost:1234/\"</span> <span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Ainsi que de la taille de l'image.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">docker images\nREPOSITORY                      TAG                    IMAGE ID       CREATED         SIZE\nmynodeimage                     latest                 db844b2a8abb   <span class=\"token number\">5</span> minutes ago   <span class=\"token number\">42</span>.9MB</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Sans oublier l'utilisateur courant du container.</p>\n<div class=\"gridsome-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it my_container ash\n/ $ <span class=\"token function\">whoami</span>\nnginx\n/ $ <span class=\"token function\">id</span>\n<span class=\"token assign-left variable\">uid</span><span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">(</span>nginx<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">gid</span><span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">(</span>nginx<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">groups</span><span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">(</span>nginx<span class=\"token punctuation\">)</span>\n/ $ <span class=\"token builtin class-name\">exit</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Conclusion</h2>\n<p>Avec un Dockerfile clair (versions spécifiques des images utilisées), images légères (Alpine), on arrive à un container léger et sécurisé (utilisateur non root). Bien entendu, selon vos préférences, vous pouvez utiliser un autre proxy que Nginx comme Apache ou Caddy.</p>\n<h2>Sources</h2>\n<ul>\n<li>Calendrier des LTS de NodeJS : <a href=\"https://nodejs.org/en/about/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nodejs.org/en/about/releases</a> ;</li>\n<li>Image NodeJS officielle : <a href=\"https://hub.docker.com/_/node\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hub.docker.com/_/node</a> ;</li>\n<li>Image Nginx officielle: <a href=\"https://hub.docker.com/_/nginx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hub.docker.com/_/nginx</a>.</li>\n</ul>\n","download":"","tags":[{"title":"Docker","path":"/tag/Docker/"},{"title":"Angular","path":"/tag/Angular/"},{"title":"Nginx","path":"/tag/Nginx/"}],"timeToRead":7,"parts":[]}},"context":{}}